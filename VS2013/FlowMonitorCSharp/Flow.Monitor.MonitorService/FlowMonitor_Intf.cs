//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Requires RODL file FloBaseTypes (C:\dev\flow\trunk\rodl\FloBaseTypes.rodl) in the same namespace.
// Requires RODL file FloServerActions (C:\dev\flow\trunk\rodl\FloServerActions.rodl) in the same namespace.
namespace FlowMonitor {
    using System;
    using System.Collections.Generic;
    using RemObjects.SDK;
    using RemObjects.SDK.Types;
    using FlowService;
    using FloBaseTypes;
    
    
    [System.Reflection.ObfuscationAttribute(Exclude=true)]
    [RemObjects.SDK.EventSink(Name="MonitorEvents", InvokerClass=typeof(MonitorEvents_EventSinkInvoker))]
    public interface IMonitorEvents : RemObjects.SDK.IROEventSink {
        
        void OnShowServerInfo(string aServiceId, string aMessage);
        
        void OnShowServerError(string aServiceId, string aMessage);
        
        void OnShowLicenseError(string aServiceId, string aMessage);
        
        void OnSetServerMenuOptions(string aServiceId);
        
        void OnSetMonitorMenuOptions(string aHostName, bool aStatus);
        
        void OnAddTransformError(string aServiceId, string aID, string aURL, string aQuestion);
        
        void OnRemoveTransformError(string aServiceId, string aID);
    }
    
    [System.Reflection.ObfuscationAttribute(Exclude=true)]
    public class MonitorEvents_EventSinkInvoker : RemObjects.SDK.EventSinkInvoker {
        
        [System.Reflection.ObfuscationAttribute(Exclude=true)]
        public static void Invoke_OnShowServerInfo(RemObjects.SDK.IROEventSinkHandlers @__Handlers, RemObjects.SDK.IMessage Message) {
            string aServiceId = Message.ReadAnsiString("aServiceId");
            string aMessage = Message.ReadAnsiString("aMessage");
            for (int @__i = 0; (@__i < @__Handlers.Count); @__i = (@__i + 1)) {
                ((IMonitorEvents)(@__Handlers[@__i])).OnShowServerInfo(aServiceId, aMessage);
            }
        }
        
        [System.Reflection.ObfuscationAttribute(Exclude=true)]
        public static void Invoke_OnShowServerError(RemObjects.SDK.IROEventSinkHandlers @__Handlers, RemObjects.SDK.IMessage Message) {
            string aServiceId = Message.ReadAnsiString("aServiceId");
            string aMessage = Message.ReadAnsiString("aMessage");
            for (int @__i = 0; (@__i < @__Handlers.Count); @__i = (@__i + 1)) {
                ((IMonitorEvents)(@__Handlers[@__i])).OnShowServerError(aServiceId, aMessage);
            }
        }
        
        [System.Reflection.ObfuscationAttribute(Exclude=true)]
        public static void Invoke_OnShowLicenseError(RemObjects.SDK.IROEventSinkHandlers @__Handlers, RemObjects.SDK.IMessage Message) {
            string aServiceId = Message.ReadAnsiString("aServiceId");
            string aMessage = Message.ReadAnsiString("aMessage");
            for (int @__i = 0; (@__i < @__Handlers.Count); @__i = (@__i + 1)) {
                ((IMonitorEvents)(@__Handlers[@__i])).OnShowLicenseError(aServiceId, aMessage);
            }
        }
        
        [System.Reflection.ObfuscationAttribute(Exclude=true)]
        public static void Invoke_OnSetServerMenuOptions(RemObjects.SDK.IROEventSinkHandlers @__Handlers, RemObjects.SDK.IMessage Message) {
            string aServiceId = Message.ReadAnsiString("aServiceId");
            for (int @__i = 0; (@__i < @__Handlers.Count); @__i = (@__i + 1)) {
                ((IMonitorEvents)(@__Handlers[@__i])).OnSetServerMenuOptions(aServiceId);
            }
        }
        
        [System.Reflection.ObfuscationAttribute(Exclude=true)]
        public static void Invoke_OnSetMonitorMenuOptions(RemObjects.SDK.IROEventSinkHandlers @__Handlers, RemObjects.SDK.IMessage Message) {
            string aHostName = Message.ReadAnsiString("aHostName");
            bool aStatus = Message.ReadBoolean("aStatus");
            for (int @__i = 0; (@__i < @__Handlers.Count); @__i = (@__i + 1)) {
                ((IMonitorEvents)(@__Handlers[@__i])).OnSetMonitorMenuOptions(aHostName, aStatus);
            }
        }
        
        [System.Reflection.ObfuscationAttribute(Exclude=true)]
        public static void Invoke_OnAddTransformError(RemObjects.SDK.IROEventSinkHandlers @__Handlers, RemObjects.SDK.IMessage Message) {
            string aServiceId = Message.ReadAnsiString("aServiceId");
            string aID = Message.ReadAnsiString("aID");
            string aURL = Message.ReadAnsiString("aURL");
            string aQuestion = Message.ReadAnsiString("aQuestion");
            for (int @__i = 0; (@__i < @__Handlers.Count); @__i = (@__i + 1)) {
                ((IMonitorEvents)(@__Handlers[@__i])).OnAddTransformError(aServiceId, aID, aURL, aQuestion);
            }
        }
        
        [System.Reflection.ObfuscationAttribute(Exclude=true)]
        public static void Invoke_OnRemoveTransformError(RemObjects.SDK.IROEventSinkHandlers @__Handlers, RemObjects.SDK.IMessage Message) {
            string aServiceId = Message.ReadAnsiString("aServiceId");
            string aID = Message.ReadAnsiString("aID");
            for (int @__i = 0; (@__i < @__Handlers.Count); @__i = (@__i + 1)) {
                ((IMonitorEvents)(@__Handlers[@__i])).OnRemoveTransformError(aServiceId, aID);
            }
        }
    }
    
    public interface IMonitorAdmin : RemObjects.SDK.IROService {
        
        bool SetActionStatus(string aServiceId, int aIndex, TFloScheduledType aActionType, TFloActionSettingType aStatus);
        
        void AddTransformError(string aServiceId, string aID, string aURL, string aQuestion);
        
        void HandleTransformError(string aServiceId, string aID);
        
        void RemoveTransformError(string aServiceId, string aID);
        
        bool IsServerStarted(string aServiceId);
        
        bool IsMonitorStarted();
        
        bool RefreshActions(string aServiceId);
        
        bool StartFlowServer(string aServiceId);
        
        bool StopFlowServer(string aServiceId);
        
        bool StopFlowServerEx(string aServiceID, string aUserID);
        
        bool KillFlowServer(string aServiceId);
        
        string Login(string aUserId);
        
        void Logout();
        
        void ShowServerInfo(string aServiceId, string aMessage);
        
        void ShowServerError(string aServiceId, string aMessage);
        
        void ShowLicenseError(string aServiceId, string aMessage);
        
        void SetServerMenuOptions(string aServiceId);
        
        ScheduledListArray GetScheduleActions(string aServiceId, bool aShowDisabled);
        
        ScheduledListArray GetMonitorActions(string aServiceId, bool aShowDisabled);
        
        ScheduledListArray GetExecutingActions(string aServiceId, bool aShowDisabled);
        
        ScheduledListArray GetTransportActions(string aServiceID, bool aShowDisabled);
        
        ScheduledListArray GetPendingFiles(string aServiceID);
        
        ServiceInfoList GetServices();
        
        void RegisterService(string aServiceId, string aDisplayName, string aPort, ServiceConnection aCon, string aServiceUser, string aServiceUserPass);
        
        bool UnRegisterService(string aServiceId);
        
        void ChangeService(string aServiceId, string aDisplayName, string aPort, string aServiceUser, string aServiceUserPass);
        
        void ChangeServiceUser(string aServiceId, string aDisplayName, string aPort, string aServiceUser, string aServiceUserPass);
        
        void ChangeServiceConnection(string aServiceId, ServiceConnection aCon);
        
        bool CheckServiceConnection(string aServiceId, ServiceConnection aCon);
        
        bool CheckServiceUser(string aServiceId, string aServiceUser, string aServiceUserPass);
        
        bool CheckServicePort(string aServiceId, string aPort);
        
        bool CheckUserLogonServiceRight(string aServiceUser, string aServiceUserPass);
        
        bool SetUserLogonServiceRight(string aServiceUser, string aServiceUserPass);
    }
    
    public partial class MonitorAdmin_Proxy : RemObjects.SDK.Proxy, IMonitorAdmin {
        
        public MonitorAdmin_Proxy(RemObjects.SDK.IMessage message, RemObjects.SDK.IClientChannel clientChannel) : 
                base(message, clientChannel) {
        }
        
        public MonitorAdmin_Proxy(RemObjects.SDK.IMessage message, RemObjects.SDK.IClientChannel clientChannel, string interfaceName) : 
                base(message, clientChannel, interfaceName) {
        }
        
        public MonitorAdmin_Proxy(RemObjects.SDK.IRemoteService remoteService) : 
                base(remoteService) {
        }
        
        public MonitorAdmin_Proxy(RemObjects.SDK.IRemoteService remoteService, string interfaceName) : 
                base(remoteService, interfaceName) {
        }
        
        public MonitorAdmin_Proxy(System.Uri uri) : 
                base(uri) {
        }
        
        public MonitorAdmin_Proxy(string url) : 
                base(url) {
        }
        
        public override string InterfaceName {
            get {
                return "MonitorAdmin";
            }
        }
        
        public virtual bool SetActionStatus(string aServiceId, int aIndex, TFloScheduledType aActionType, TFloActionSettingType aStatus) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "SetActionStatus");
                @__LocalMessage.WriteAnsiString("aServiceId", aServiceId);
                @__LocalMessage.WriteInt32("aIndex", aIndex);
                @__LocalMessage.Write("aActionType", aActionType, typeof(TFloScheduledType), RemObjects.SDK.StreamingFormat.Default);
                @__LocalMessage.Write("aStatus", aStatus, typeof(TFloActionSettingType), RemObjects.SDK.StreamingFormat.Default);
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
                bool _Result = @__LocalMessage.ReadBoolean("Result");
                return _Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual void AddTransformError(string aServiceId, string aID, string aURL, string aQuestion) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "AddTransformError");
                @__LocalMessage.WriteAnsiString("aServiceId", aServiceId);
                @__LocalMessage.WriteAnsiString("aID", aID);
                @__LocalMessage.WriteAnsiString("aURL", aURL);
                @__LocalMessage.WriteAnsiString("aQuestion", aQuestion);
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual void HandleTransformError(string aServiceId, string aID) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "HandleTransformError");
                @__LocalMessage.WriteAnsiString("aServiceId", aServiceId);
                @__LocalMessage.WriteAnsiString("aID", aID);
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual void RemoveTransformError(string aServiceId, string aID) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "RemoveTransformError");
                @__LocalMessage.WriteAnsiString("aServiceId", aServiceId);
                @__LocalMessage.WriteAnsiString("aID", aID);
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual bool IsServerStarted(string aServiceId) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "IsServerStarted");
                @__LocalMessage.WriteAnsiString("aServiceId", aServiceId);
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
                bool _Result = @__LocalMessage.ReadBoolean("Result");
                return _Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual bool IsMonitorStarted() {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "IsMonitorStarted");
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
                bool _Result = @__LocalMessage.ReadBoolean("Result");
                return _Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual bool RefreshActions(string aServiceId) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "RefreshActions");
                @__LocalMessage.WriteAnsiString("aServiceId", aServiceId);
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
                bool _Result = @__LocalMessage.ReadBoolean("Result");
                return _Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual bool StartFlowServer(string aServiceId) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "StartFlowServer");
                @__LocalMessage.WriteAnsiString("aServiceId", aServiceId);
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
                bool _Result = @__LocalMessage.ReadBoolean("Result");
                return _Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual bool StopFlowServer(string aServiceId) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "StopFlowServer");
                @__LocalMessage.WriteAnsiString("aServiceId", aServiceId);
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
                bool _Result = @__LocalMessage.ReadBoolean("Result");
                return _Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual bool StopFlowServerEx(string aServiceID, string aUserID) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "StopFlowServerEx");
                @__LocalMessage.WriteAnsiString("aServiceID", aServiceID);
                @__LocalMessage.WriteAnsiString("aUserID", aUserID);
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
                bool _Result = @__LocalMessage.ReadBoolean("Result");
                return _Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual bool KillFlowServer(string aServiceId) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "KillFlowServer");
                @__LocalMessage.WriteAnsiString("aServiceId", aServiceId);
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
                bool _Result = @__LocalMessage.ReadBoolean("Result");
                return _Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual string Login(string aUserId) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "Login");
                @__LocalMessage.WriteAnsiString("aUserId", aUserId);
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
                string _Result = @__LocalMessage.ReadAnsiString("Result");
                return _Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual void Logout() {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "Logout");
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual void ShowServerInfo(string aServiceId, string aMessage) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "ShowServerInfo");
                @__LocalMessage.WriteAnsiString("aServiceId", aServiceId);
                @__LocalMessage.WriteAnsiString("aMessage", aMessage);
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual void ShowServerError(string aServiceId, string aMessage) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "ShowServerError");
                @__LocalMessage.WriteAnsiString("aServiceId", aServiceId);
                @__LocalMessage.WriteAnsiString("aMessage", aMessage);
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual void ShowLicenseError(string aServiceId, string aMessage) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "ShowLicenseError");
                @__LocalMessage.WriteAnsiString("aServiceId", aServiceId);
                @__LocalMessage.WriteAnsiString("aMessage", aMessage);
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual void SetServerMenuOptions(string aServiceId) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "SetServerMenuOptions");
                @__LocalMessage.WriteAnsiString("aServiceId", aServiceId);
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual ScheduledListArray GetScheduleActions(string aServiceId, bool aShowDisabled) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "GetScheduleActions");
                @__LocalMessage.WriteAnsiString("aServiceId", aServiceId);
                @__LocalMessage.WriteBoolean("aShowDisabled", aShowDisabled);
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
                ScheduledListArray _Result = ((ScheduledListArray)(@__LocalMessage.Read("Result", typeof(ScheduledListArray), RemObjects.SDK.StreamingFormat.Default)));
                return _Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual ScheduledListArray GetMonitorActions(string aServiceId, bool aShowDisabled) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "GetMonitorActions");
                @__LocalMessage.WriteAnsiString("aServiceId", aServiceId);
                @__LocalMessage.WriteBoolean("aShowDisabled", aShowDisabled);
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
                ScheduledListArray _Result = ((ScheduledListArray)(@__LocalMessage.Read("Result", typeof(ScheduledListArray), RemObjects.SDK.StreamingFormat.Default)));
                return _Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual ScheduledListArray GetExecutingActions(string aServiceId, bool aShowDisabled) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "GetExecutingActions");
                @__LocalMessage.WriteAnsiString("aServiceId", aServiceId);
                @__LocalMessage.WriteBoolean("aShowDisabled", aShowDisabled);
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
                ScheduledListArray _Result = ((ScheduledListArray)(@__LocalMessage.Read("Result", typeof(ScheduledListArray), RemObjects.SDK.StreamingFormat.Default)));
                return _Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual ScheduledListArray GetTransportActions(string aServiceID, bool aShowDisabled) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "GetTransportActions");
                @__LocalMessage.WriteAnsiString("aServiceID", aServiceID);
                @__LocalMessage.WriteBoolean("aShowDisabled", aShowDisabled);
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
                ScheduledListArray _Result = ((ScheduledListArray)(@__LocalMessage.Read("Result", typeof(ScheduledListArray), RemObjects.SDK.StreamingFormat.Default)));
                return _Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual ScheduledListArray GetPendingFiles(string aServiceID) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "GetPendingFiles");
                @__LocalMessage.WriteAnsiString("aServiceID", aServiceID);
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
                ScheduledListArray _Result = ((ScheduledListArray)(@__LocalMessage.Read("Result", typeof(ScheduledListArray), RemObjects.SDK.StreamingFormat.Default)));
                return _Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual ServiceInfoList GetServices() {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "GetServices");
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
                ServiceInfoList _Result = ((ServiceInfoList)(@__LocalMessage.Read("Result", typeof(ServiceInfoList), RemObjects.SDK.StreamingFormat.Default)));
                return _Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual void RegisterService(string aServiceId, string aDisplayName, string aPort, ServiceConnection aCon, string aServiceUser, string aServiceUserPass) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "RegisterService");
                @__LocalMessage.WriteAnsiString("aServiceId", aServiceId);
                @__LocalMessage.WriteAnsiString("aDisplayName", aDisplayName);
                @__LocalMessage.WriteAnsiString("aPort", aPort);
                @__LocalMessage.Write("aCon", aCon, typeof(ServiceConnection), RemObjects.SDK.StreamingFormat.Default);
                @__LocalMessage.WriteAnsiString("aServiceUser", aServiceUser);
                @__LocalMessage.WriteAnsiString("aServiceUserPass", aServiceUserPass);
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual bool UnRegisterService(string aServiceId) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "UnRegisterService");
                @__LocalMessage.WriteAnsiString("aServiceId", aServiceId);
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
                bool _Result = @__LocalMessage.ReadBoolean("Result");
                return _Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual void ChangeService(string aServiceId, string aDisplayName, string aPort, string aServiceUser, string aServiceUserPass) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "ChangeService");
                @__LocalMessage.WriteAnsiString("aServiceId", aServiceId);
                @__LocalMessage.WriteAnsiString("aDisplayName", aDisplayName);
                @__LocalMessage.WriteAnsiString("aPort", aPort);
                @__LocalMessage.WriteAnsiString("aServiceUser", aServiceUser);
                @__LocalMessage.WriteAnsiString("aServiceUserPass", aServiceUserPass);
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual void ChangeServiceUser(string aServiceId, string aDisplayName, string aPort, string aServiceUser, string aServiceUserPass) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "ChangeServiceUser");
                @__LocalMessage.WriteAnsiString("aServiceId", aServiceId);
                @__LocalMessage.WriteAnsiString("aDisplayName", aDisplayName);
                @__LocalMessage.WriteAnsiString("aPort", aPort);
                @__LocalMessage.WriteAnsiString("aServiceUser", aServiceUser);
                @__LocalMessage.WriteAnsiString("aServiceUserPass", aServiceUserPass);
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual void ChangeServiceConnection(string aServiceId, ServiceConnection aCon) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "ChangeServiceConnection");
                @__LocalMessage.WriteAnsiString("aServiceId", aServiceId);
                @__LocalMessage.Write("aCon", aCon, typeof(ServiceConnection), RemObjects.SDK.StreamingFormat.Default);
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual bool CheckServiceConnection(string aServiceId, ServiceConnection aCon) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "CheckServiceConnection");
                @__LocalMessage.WriteAnsiString("aServiceId", aServiceId);
                @__LocalMessage.Write("aCon", aCon, typeof(ServiceConnection), RemObjects.SDK.StreamingFormat.Default);
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
                bool _Result = @__LocalMessage.ReadBoolean("Result");
                return _Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual bool CheckServiceUser(string aServiceId, string aServiceUser, string aServiceUserPass) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "CheckServiceUser");
                @__LocalMessage.WriteAnsiString("aServiceId", aServiceId);
                @__LocalMessage.WriteAnsiString("aServiceUser", aServiceUser);
                @__LocalMessage.WriteAnsiString("aServiceUserPass", aServiceUserPass);
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
                bool _Result = @__LocalMessage.ReadBoolean("Result");
                return _Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual bool CheckServicePort(string aServiceId, string aPort) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "CheckServicePort");
                @__LocalMessage.WriteAnsiString("aServiceId", aServiceId);
                @__LocalMessage.WriteAnsiString("aPort", aPort);
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
                bool _Result = @__LocalMessage.ReadBoolean("Result");
                return _Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual bool CheckUserLogonServiceRight(string aServiceUser, string aServiceUserPass) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "CheckUserLogonServiceRight");
                @__LocalMessage.WriteAnsiString("aServiceUser", aServiceUser);
                @__LocalMessage.WriteAnsiString("aServiceUserPass", aServiceUserPass);
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
                bool _Result = @__LocalMessage.ReadBoolean("Result");
                return _Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual bool SetUserLogonServiceRight(string aServiceUser, string aServiceUserPass) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "SetUserLogonServiceRight");
                @__LocalMessage.WriteAnsiString("aServiceUser", aServiceUser);
                @__LocalMessage.WriteAnsiString("aServiceUserPass", aServiceUserPass);
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
                bool _Result = @__LocalMessage.ReadBoolean("Result");
                return _Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
    }
    
    public class CoMonitorAdmin {
        
        public static IMonitorAdmin Create(RemObjects.SDK.IMessage message, RemObjects.SDK.IClientChannel clientChannel) {
            return new MonitorAdmin_Proxy(message, clientChannel);
        }
        
        public static IMonitorAdmin Create(RemObjects.SDK.IRemoteService remoteService) {
            return new MonitorAdmin_Proxy(remoteService);
        }
        
        public static IMonitorAdmin Create(System.Uri uri) {
            return new MonitorAdmin_Proxy(uri);
        }
        
        public static IMonitorAdmin Create(string url) {
            return new MonitorAdmin_Proxy(url);
        }
    }
    
    public interface IMonitorAdmin_Async : RemObjects.SDK.IROService_Async {
        
        System.IAsyncResult BeginSetActionStatus(string aServiceId, int aIndex, TFloScheduledType aActionType, TFloActionSettingType aStatus, System.AsyncCallback @__Callback, object @__UserData);
        
        bool EndSetActionStatus(System.IAsyncResult @__AsyncResult);
        
        System.Threading.Tasks.Task<bool> SetActionStatusAsync(string aServiceId, int aIndex, TFloScheduledType aActionType, TFloActionSettingType aStatus);
        
        System.IAsyncResult BeginAddTransformError(string aServiceId, string aID, string aURL, string aQuestion, System.AsyncCallback @__Callback, object @__UserData);
        
        void EndAddTransformError(System.IAsyncResult @__AsyncResult);
        
        System.Threading.Tasks.Task AddTransformErrorAsync(string aServiceId, string aID, string aURL, string aQuestion);
        
        System.IAsyncResult BeginHandleTransformError(string aServiceId, string aID, System.AsyncCallback @__Callback, object @__UserData);
        
        void EndHandleTransformError(System.IAsyncResult @__AsyncResult);
        
        System.Threading.Tasks.Task HandleTransformErrorAsync(string aServiceId, string aID);
        
        System.IAsyncResult BeginRemoveTransformError(string aServiceId, string aID, System.AsyncCallback @__Callback, object @__UserData);
        
        void EndRemoveTransformError(System.IAsyncResult @__AsyncResult);
        
        System.Threading.Tasks.Task RemoveTransformErrorAsync(string aServiceId, string aID);
        
        System.IAsyncResult BeginIsServerStarted(string aServiceId, System.AsyncCallback @__Callback, object @__UserData);
        
        bool EndIsServerStarted(System.IAsyncResult @__AsyncResult);
        
        System.Threading.Tasks.Task<bool> IsServerStartedAsync(string aServiceId);
        
        System.IAsyncResult BeginIsMonitorStarted(System.AsyncCallback @__Callback, object @__UserData);
        
        bool EndIsMonitorStarted(System.IAsyncResult @__AsyncResult);
        
        System.Threading.Tasks.Task<bool> IsMonitorStartedAsync();
        
        System.IAsyncResult BeginRefreshActions(string aServiceId, System.AsyncCallback @__Callback, object @__UserData);
        
        bool EndRefreshActions(System.IAsyncResult @__AsyncResult);
        
        System.Threading.Tasks.Task<bool> RefreshActionsAsync(string aServiceId);
        
        System.IAsyncResult BeginStartFlowServer(string aServiceId, System.AsyncCallback @__Callback, object @__UserData);
        
        bool EndStartFlowServer(System.IAsyncResult @__AsyncResult);
        
        System.Threading.Tasks.Task<bool> StartFlowServerAsync(string aServiceId);
        
        System.IAsyncResult BeginStopFlowServer(string aServiceId, System.AsyncCallback @__Callback, object @__UserData);
        
        bool EndStopFlowServer(System.IAsyncResult @__AsyncResult);
        
        System.Threading.Tasks.Task<bool> StopFlowServerAsync(string aServiceId);
        
        System.IAsyncResult BeginStopFlowServerEx(string aServiceID, string aUserID, System.AsyncCallback @__Callback, object @__UserData);
        
        bool EndStopFlowServerEx(System.IAsyncResult @__AsyncResult);
        
        System.Threading.Tasks.Task<bool> StopFlowServerExAsync(string aServiceID, string aUserID);
        
        System.IAsyncResult BeginKillFlowServer(string aServiceId, System.AsyncCallback @__Callback, object @__UserData);
        
        bool EndKillFlowServer(System.IAsyncResult @__AsyncResult);
        
        System.Threading.Tasks.Task<bool> KillFlowServerAsync(string aServiceId);
        
        System.IAsyncResult BeginLogin(string aUserId, System.AsyncCallback @__Callback, object @__UserData);
        
        string EndLogin(System.IAsyncResult @__AsyncResult);
        
        System.Threading.Tasks.Task<string> LoginAsync(string aUserId);
        
        System.IAsyncResult BeginLogout(System.AsyncCallback @__Callback, object @__UserData);
        
        void EndLogout(System.IAsyncResult @__AsyncResult);
        
        System.Threading.Tasks.Task LogoutAsync();
        
        System.IAsyncResult BeginShowServerInfo(string aServiceId, string aMessage, System.AsyncCallback @__Callback, object @__UserData);
        
        void EndShowServerInfo(System.IAsyncResult @__AsyncResult);
        
        System.Threading.Tasks.Task ShowServerInfoAsync(string aServiceId, string aMessage);
        
        System.IAsyncResult BeginShowServerError(string aServiceId, string aMessage, System.AsyncCallback @__Callback, object @__UserData);
        
        void EndShowServerError(System.IAsyncResult @__AsyncResult);
        
        System.Threading.Tasks.Task ShowServerErrorAsync(string aServiceId, string aMessage);
        
        System.IAsyncResult BeginShowLicenseError(string aServiceId, string aMessage, System.AsyncCallback @__Callback, object @__UserData);
        
        void EndShowLicenseError(System.IAsyncResult @__AsyncResult);
        
        System.Threading.Tasks.Task ShowLicenseErrorAsync(string aServiceId, string aMessage);
        
        System.IAsyncResult BeginSetServerMenuOptions(string aServiceId, System.AsyncCallback @__Callback, object @__UserData);
        
        void EndSetServerMenuOptions(System.IAsyncResult @__AsyncResult);
        
        System.Threading.Tasks.Task SetServerMenuOptionsAsync(string aServiceId);
        
        System.IAsyncResult BeginGetScheduleActions(string aServiceId, bool aShowDisabled, System.AsyncCallback @__Callback, object @__UserData);
        
        ScheduledListArray EndGetScheduleActions(System.IAsyncResult @__AsyncResult);
        
        System.Threading.Tasks.Task<ScheduledListArray> GetScheduleActionsAsync(string aServiceId, bool aShowDisabled);
        
        System.IAsyncResult BeginGetMonitorActions(string aServiceId, bool aShowDisabled, System.AsyncCallback @__Callback, object @__UserData);
        
        ScheduledListArray EndGetMonitorActions(System.IAsyncResult @__AsyncResult);
        
        System.Threading.Tasks.Task<ScheduledListArray> GetMonitorActionsAsync(string aServiceId, bool aShowDisabled);
        
        System.IAsyncResult BeginGetExecutingActions(string aServiceId, bool aShowDisabled, System.AsyncCallback @__Callback, object @__UserData);
        
        ScheduledListArray EndGetExecutingActions(System.IAsyncResult @__AsyncResult);
        
        System.Threading.Tasks.Task<ScheduledListArray> GetExecutingActionsAsync(string aServiceId, bool aShowDisabled);
        
        System.IAsyncResult BeginGetTransportActions(string aServiceID, bool aShowDisabled, System.AsyncCallback @__Callback, object @__UserData);
        
        ScheduledListArray EndGetTransportActions(System.IAsyncResult @__AsyncResult);
        
        System.Threading.Tasks.Task<ScheduledListArray> GetTransportActionsAsync(string aServiceID, bool aShowDisabled);
        
        System.IAsyncResult BeginGetPendingFiles(string aServiceID, System.AsyncCallback @__Callback, object @__UserData);
        
        ScheduledListArray EndGetPendingFiles(System.IAsyncResult @__AsyncResult);
        
        System.Threading.Tasks.Task<ScheduledListArray> GetPendingFilesAsync(string aServiceID);
        
        System.IAsyncResult BeginGetServices(System.AsyncCallback @__Callback, object @__UserData);
        
        ServiceInfoList EndGetServices(System.IAsyncResult @__AsyncResult);
        
        System.Threading.Tasks.Task<ServiceInfoList> GetServicesAsync();
        
        System.IAsyncResult BeginRegisterService(string aServiceId, string aDisplayName, string aPort, ServiceConnection aCon, string aServiceUser, string aServiceUserPass, System.AsyncCallback @__Callback, object @__UserData);
        
        void EndRegisterService(System.IAsyncResult @__AsyncResult);
        
        System.Threading.Tasks.Task RegisterServiceAsync(string aServiceId, string aDisplayName, string aPort, ServiceConnection aCon, string aServiceUser, string aServiceUserPass);
        
        System.IAsyncResult BeginUnRegisterService(string aServiceId, System.AsyncCallback @__Callback, object @__UserData);
        
        bool EndUnRegisterService(System.IAsyncResult @__AsyncResult);
        
        System.Threading.Tasks.Task<bool> UnRegisterServiceAsync(string aServiceId);
        
        System.IAsyncResult BeginChangeService(string aServiceId, string aDisplayName, string aPort, string aServiceUser, string aServiceUserPass, System.AsyncCallback @__Callback, object @__UserData);
        
        void EndChangeService(System.IAsyncResult @__AsyncResult);
        
        System.Threading.Tasks.Task ChangeServiceAsync(string aServiceId, string aDisplayName, string aPort, string aServiceUser, string aServiceUserPass);
        
        System.IAsyncResult BeginChangeServiceUser(string aServiceId, string aDisplayName, string aPort, string aServiceUser, string aServiceUserPass, System.AsyncCallback @__Callback, object @__UserData);
        
        void EndChangeServiceUser(System.IAsyncResult @__AsyncResult);
        
        System.Threading.Tasks.Task ChangeServiceUserAsync(string aServiceId, string aDisplayName, string aPort, string aServiceUser, string aServiceUserPass);
        
        System.IAsyncResult BeginChangeServiceConnection(string aServiceId, ServiceConnection aCon, System.AsyncCallback @__Callback, object @__UserData);
        
        void EndChangeServiceConnection(System.IAsyncResult @__AsyncResult);
        
        System.Threading.Tasks.Task ChangeServiceConnectionAsync(string aServiceId, ServiceConnection aCon);
        
        System.IAsyncResult BeginCheckServiceConnection(string aServiceId, ServiceConnection aCon, System.AsyncCallback @__Callback, object @__UserData);
        
        bool EndCheckServiceConnection(System.IAsyncResult @__AsyncResult);
        
        System.Threading.Tasks.Task<bool> CheckServiceConnectionAsync(string aServiceId, ServiceConnection aCon);
        
        System.IAsyncResult BeginCheckServiceUser(string aServiceId, string aServiceUser, string aServiceUserPass, System.AsyncCallback @__Callback, object @__UserData);
        
        bool EndCheckServiceUser(System.IAsyncResult @__AsyncResult);
        
        System.Threading.Tasks.Task<bool> CheckServiceUserAsync(string aServiceId, string aServiceUser, string aServiceUserPass);
        
        System.IAsyncResult BeginCheckServicePort(string aServiceId, string aPort, System.AsyncCallback @__Callback, object @__UserData);
        
        bool EndCheckServicePort(System.IAsyncResult @__AsyncResult);
        
        System.Threading.Tasks.Task<bool> CheckServicePortAsync(string aServiceId, string aPort);
        
        System.IAsyncResult BeginCheckUserLogonServiceRight(string aServiceUser, string aServiceUserPass, System.AsyncCallback @__Callback, object @__UserData);
        
        bool EndCheckUserLogonServiceRight(System.IAsyncResult @__AsyncResult);
        
        System.Threading.Tasks.Task<bool> CheckUserLogonServiceRightAsync(string aServiceUser, string aServiceUserPass);
        
        System.IAsyncResult BeginSetUserLogonServiceRight(string aServiceUser, string aServiceUserPass, System.AsyncCallback @__Callback, object @__UserData);
        
        bool EndSetUserLogonServiceRight(System.IAsyncResult @__AsyncResult);
        
        System.Threading.Tasks.Task<bool> SetUserLogonServiceRightAsync(string aServiceUser, string aServiceUserPass);
    }
    
    public partial class MonitorAdmin_AsyncProxy : RemObjects.SDK.AsyncProxy, IMonitorAdmin_Async {
        
        public MonitorAdmin_AsyncProxy(RemObjects.SDK.IMessage message, RemObjects.SDK.IClientChannel clientChannel) : 
                base(message, clientChannel) {
        }
        
        public MonitorAdmin_AsyncProxy(RemObjects.SDK.IMessage message, RemObjects.SDK.IClientChannel clientChannel, string interfaceName) : 
                base(message, clientChannel, interfaceName) {
        }
        
        public MonitorAdmin_AsyncProxy(RemObjects.SDK.IRemoteService remoteService) : 
                base(remoteService) {
        }
        
        public MonitorAdmin_AsyncProxy(RemObjects.SDK.IRemoteService remoteService, string interfaceName) : 
                base(remoteService, interfaceName) {
        }
        
        public MonitorAdmin_AsyncProxy(System.Uri uri) : 
                base(uri) {
        }
        
        public MonitorAdmin_AsyncProxy(string url) : 
                base(url) {
        }
        
        public override string InterfaceName {
            get {
                return "MonitorAdmin";
            }
        }
        
        public virtual System.IAsyncResult BeginSetActionStatus(string aServiceId, int aIndex, TFloScheduledType aActionType, TFloActionSettingType aStatus, System.AsyncCallback @__Callback, object @__UserData) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "SetActionStatus");
                @__LocalMessage.WriteAnsiString("aServiceId", aServiceId);
                @__LocalMessage.WriteInt32("aIndex", aIndex);
                @__LocalMessage.Write("aActionType", aActionType, typeof(TFloScheduledType), RemObjects.SDK.StreamingFormat.Default);
                @__LocalMessage.Write("aStatus", aStatus, typeof(TFloActionSettingType), RemObjects.SDK.StreamingFormat.Default);
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex) {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }
        
        public virtual bool EndSetActionStatus(System.IAsyncResult @__AsyncResult) {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try {
                bool Result = @__LocalMessage.ReadBoolean("Result");
                return Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual System.Threading.Tasks.Task<bool> SetActionStatusAsync(string aServiceId, int aIndex, TFloScheduledType aActionType, TFloActionSettingType aStatus) {
            return System.Threading.Tasks.Task<bool>.Factory.FromAsync(this.BeginSetActionStatus(aServiceId, aIndex, aActionType, aStatus, null, null), new System.Func<System.IAsyncResult, bool>(this.EndSetActionStatus));
        }
        
        public virtual System.IAsyncResult BeginAddTransformError(string aServiceId, string aID, string aURL, string aQuestion, System.AsyncCallback @__Callback, object @__UserData) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "AddTransformError");
                @__LocalMessage.WriteAnsiString("aServiceId", aServiceId);
                @__LocalMessage.WriteAnsiString("aID", aID);
                @__LocalMessage.WriteAnsiString("aURL", aURL);
                @__LocalMessage.WriteAnsiString("aQuestion", aQuestion);
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex) {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }
        
        public virtual void EndAddTransformError(System.IAsyncResult @__AsyncResult) {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try {
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual System.Threading.Tasks.Task AddTransformErrorAsync(string aServiceId, string aID, string aURL, string aQuestion) {
            return System.Threading.Tasks.Task.Factory.FromAsync(this.BeginAddTransformError(aServiceId, aID, aURL, aQuestion, null, null), new System.Action<System.IAsyncResult>(this.EndAddTransformError));
        }
        
        public virtual System.IAsyncResult BeginHandleTransformError(string aServiceId, string aID, System.AsyncCallback @__Callback, object @__UserData) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "HandleTransformError");
                @__LocalMessage.WriteAnsiString("aServiceId", aServiceId);
                @__LocalMessage.WriteAnsiString("aID", aID);
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex) {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }
        
        public virtual void EndHandleTransformError(System.IAsyncResult @__AsyncResult) {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try {
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual System.Threading.Tasks.Task HandleTransformErrorAsync(string aServiceId, string aID) {
            return System.Threading.Tasks.Task.Factory.FromAsync(this.BeginHandleTransformError(aServiceId, aID, null, null), new System.Action<System.IAsyncResult>(this.EndHandleTransformError));
        }
        
        public virtual System.IAsyncResult BeginRemoveTransformError(string aServiceId, string aID, System.AsyncCallback @__Callback, object @__UserData) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "RemoveTransformError");
                @__LocalMessage.WriteAnsiString("aServiceId", aServiceId);
                @__LocalMessage.WriteAnsiString("aID", aID);
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex) {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }
        
        public virtual void EndRemoveTransformError(System.IAsyncResult @__AsyncResult) {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try {
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual System.Threading.Tasks.Task RemoveTransformErrorAsync(string aServiceId, string aID) {
            return System.Threading.Tasks.Task.Factory.FromAsync(this.BeginRemoveTransformError(aServiceId, aID, null, null), new System.Action<System.IAsyncResult>(this.EndRemoveTransformError));
        }
        
        public virtual System.IAsyncResult BeginIsServerStarted(string aServiceId, System.AsyncCallback @__Callback, object @__UserData) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "IsServerStarted");
                @__LocalMessage.WriteAnsiString("aServiceId", aServiceId);
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex) {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }
        
        public virtual bool EndIsServerStarted(System.IAsyncResult @__AsyncResult) {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try {
                bool Result = @__LocalMessage.ReadBoolean("Result");
                return Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual System.Threading.Tasks.Task<bool> IsServerStartedAsync(string aServiceId) {
            return System.Threading.Tasks.Task<bool>.Factory.FromAsync(this.BeginIsServerStarted(aServiceId, null, null), new System.Func<System.IAsyncResult, bool>(this.EndIsServerStarted));
        }
        
        public virtual System.IAsyncResult BeginIsMonitorStarted(System.AsyncCallback @__Callback, object @__UserData) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "IsMonitorStarted");
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex) {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }
        
        public virtual bool EndIsMonitorStarted(System.IAsyncResult @__AsyncResult) {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try {
                bool Result = @__LocalMessage.ReadBoolean("Result");
                return Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual System.Threading.Tasks.Task<bool> IsMonitorStartedAsync() {
            return System.Threading.Tasks.Task<bool>.Factory.FromAsync(this.BeginIsMonitorStarted(null, null), new System.Func<System.IAsyncResult, bool>(this.EndIsMonitorStarted));
        }
        
        public virtual System.IAsyncResult BeginRefreshActions(string aServiceId, System.AsyncCallback @__Callback, object @__UserData) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "RefreshActions");
                @__LocalMessage.WriteAnsiString("aServiceId", aServiceId);
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex) {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }
        
        public virtual bool EndRefreshActions(System.IAsyncResult @__AsyncResult) {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try {
                bool Result = @__LocalMessage.ReadBoolean("Result");
                return Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual System.Threading.Tasks.Task<bool> RefreshActionsAsync(string aServiceId) {
            return System.Threading.Tasks.Task<bool>.Factory.FromAsync(this.BeginRefreshActions(aServiceId, null, null), new System.Func<System.IAsyncResult, bool>(this.EndRefreshActions));
        }
        
        public virtual System.IAsyncResult BeginStartFlowServer(string aServiceId, System.AsyncCallback @__Callback, object @__UserData) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "StartFlowServer");
                @__LocalMessage.WriteAnsiString("aServiceId", aServiceId);
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex) {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }
        
        public virtual bool EndStartFlowServer(System.IAsyncResult @__AsyncResult) {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try {
                bool Result = @__LocalMessage.ReadBoolean("Result");
                return Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual System.Threading.Tasks.Task<bool> StartFlowServerAsync(string aServiceId) {
            return System.Threading.Tasks.Task<bool>.Factory.FromAsync(this.BeginStartFlowServer(aServiceId, null, null), new System.Func<System.IAsyncResult, bool>(this.EndStartFlowServer));
        }
        
        public virtual System.IAsyncResult BeginStopFlowServer(string aServiceId, System.AsyncCallback @__Callback, object @__UserData) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "StopFlowServer");
                @__LocalMessage.WriteAnsiString("aServiceId", aServiceId);
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex) {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }
        
        public virtual bool EndStopFlowServer(System.IAsyncResult @__AsyncResult) {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try {
                bool Result = @__LocalMessage.ReadBoolean("Result");
                return Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual System.Threading.Tasks.Task<bool> StopFlowServerAsync(string aServiceId) {
            return System.Threading.Tasks.Task<bool>.Factory.FromAsync(this.BeginStopFlowServer(aServiceId, null, null), new System.Func<System.IAsyncResult, bool>(this.EndStopFlowServer));
        }
        
        public virtual System.IAsyncResult BeginStopFlowServerEx(string aServiceID, string aUserID, System.AsyncCallback @__Callback, object @__UserData) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "StopFlowServerEx");
                @__LocalMessage.WriteAnsiString("aServiceID", aServiceID);
                @__LocalMessage.WriteAnsiString("aUserID", aUserID);
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex) {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }
        
        public virtual bool EndStopFlowServerEx(System.IAsyncResult @__AsyncResult) {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try {
                bool Result = @__LocalMessage.ReadBoolean("Result");
                return Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual System.Threading.Tasks.Task<bool> StopFlowServerExAsync(string aServiceID, string aUserID) {
            return System.Threading.Tasks.Task<bool>.Factory.FromAsync(this.BeginStopFlowServerEx(aServiceID, aUserID, null, null), new System.Func<System.IAsyncResult, bool>(this.EndStopFlowServerEx));
        }
        
        public virtual System.IAsyncResult BeginKillFlowServer(string aServiceId, System.AsyncCallback @__Callback, object @__UserData) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "KillFlowServer");
                @__LocalMessage.WriteAnsiString("aServiceId", aServiceId);
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex) {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }
        
        public virtual bool EndKillFlowServer(System.IAsyncResult @__AsyncResult) {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try {
                bool Result = @__LocalMessage.ReadBoolean("Result");
                return Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual System.Threading.Tasks.Task<bool> KillFlowServerAsync(string aServiceId) {
            return System.Threading.Tasks.Task<bool>.Factory.FromAsync(this.BeginKillFlowServer(aServiceId, null, null), new System.Func<System.IAsyncResult, bool>(this.EndKillFlowServer));
        }
        
        public virtual System.IAsyncResult BeginLogin(string aUserId, System.AsyncCallback @__Callback, object @__UserData) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "Login");
                @__LocalMessage.WriteAnsiString("aUserId", aUserId);
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex) {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }
        
        public virtual string EndLogin(System.IAsyncResult @__AsyncResult) {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try {
                string Result = @__LocalMessage.ReadAnsiString("Result");
                return Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual System.Threading.Tasks.Task<string> LoginAsync(string aUserId) {
            return System.Threading.Tasks.Task<string>.Factory.FromAsync(this.BeginLogin(aUserId, null, null), new System.Func<System.IAsyncResult, string>(this.EndLogin));
        }
        
        public virtual System.IAsyncResult BeginLogout(System.AsyncCallback @__Callback, object @__UserData) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "Logout");
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex) {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }
        
        public virtual void EndLogout(System.IAsyncResult @__AsyncResult) {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try {
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual System.Threading.Tasks.Task LogoutAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(this.BeginLogout(null, null), new System.Action<System.IAsyncResult>(this.EndLogout));
        }
        
        public virtual System.IAsyncResult BeginShowServerInfo(string aServiceId, string aMessage, System.AsyncCallback @__Callback, object @__UserData) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "ShowServerInfo");
                @__LocalMessage.WriteAnsiString("aServiceId", aServiceId);
                @__LocalMessage.WriteAnsiString("aMessage", aMessage);
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex) {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }
        
        public virtual void EndShowServerInfo(System.IAsyncResult @__AsyncResult) {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try {
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual System.Threading.Tasks.Task ShowServerInfoAsync(string aServiceId, string aMessage) {
            return System.Threading.Tasks.Task.Factory.FromAsync(this.BeginShowServerInfo(aServiceId, aMessage, null, null), new System.Action<System.IAsyncResult>(this.EndShowServerInfo));
        }
        
        public virtual System.IAsyncResult BeginShowServerError(string aServiceId, string aMessage, System.AsyncCallback @__Callback, object @__UserData) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "ShowServerError");
                @__LocalMessage.WriteAnsiString("aServiceId", aServiceId);
                @__LocalMessage.WriteAnsiString("aMessage", aMessage);
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex) {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }
        
        public virtual void EndShowServerError(System.IAsyncResult @__AsyncResult) {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try {
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual System.Threading.Tasks.Task ShowServerErrorAsync(string aServiceId, string aMessage) {
            return System.Threading.Tasks.Task.Factory.FromAsync(this.BeginShowServerError(aServiceId, aMessage, null, null), new System.Action<System.IAsyncResult>(this.EndShowServerError));
        }
        
        public virtual System.IAsyncResult BeginShowLicenseError(string aServiceId, string aMessage, System.AsyncCallback @__Callback, object @__UserData) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "ShowLicenseError");
                @__LocalMessage.WriteAnsiString("aServiceId", aServiceId);
                @__LocalMessage.WriteAnsiString("aMessage", aMessage);
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex) {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }
        
        public virtual void EndShowLicenseError(System.IAsyncResult @__AsyncResult) {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try {
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual System.Threading.Tasks.Task ShowLicenseErrorAsync(string aServiceId, string aMessage) {
            return System.Threading.Tasks.Task.Factory.FromAsync(this.BeginShowLicenseError(aServiceId, aMessage, null, null), new System.Action<System.IAsyncResult>(this.EndShowLicenseError));
        }
        
        public virtual System.IAsyncResult BeginSetServerMenuOptions(string aServiceId, System.AsyncCallback @__Callback, object @__UserData) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "SetServerMenuOptions");
                @__LocalMessage.WriteAnsiString("aServiceId", aServiceId);
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex) {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }
        
        public virtual void EndSetServerMenuOptions(System.IAsyncResult @__AsyncResult) {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try {
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual System.Threading.Tasks.Task SetServerMenuOptionsAsync(string aServiceId) {
            return System.Threading.Tasks.Task.Factory.FromAsync(this.BeginSetServerMenuOptions(aServiceId, null, null), new System.Action<System.IAsyncResult>(this.EndSetServerMenuOptions));
        }
        
        public virtual System.IAsyncResult BeginGetScheduleActions(string aServiceId, bool aShowDisabled, System.AsyncCallback @__Callback, object @__UserData) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "GetScheduleActions");
                @__LocalMessage.WriteAnsiString("aServiceId", aServiceId);
                @__LocalMessage.WriteBoolean("aShowDisabled", aShowDisabled);
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex) {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }
        
        public virtual ScheduledListArray EndGetScheduleActions(System.IAsyncResult @__AsyncResult) {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try {
                ScheduledListArray Result = ((ScheduledListArray)(@__LocalMessage.Read("Result", typeof(ScheduledListArray), RemObjects.SDK.StreamingFormat.Default)));
                return Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual System.Threading.Tasks.Task<ScheduledListArray> GetScheduleActionsAsync(string aServiceId, bool aShowDisabled) {
            return System.Threading.Tasks.Task<ScheduledListArray>.Factory.FromAsync(this.BeginGetScheduleActions(aServiceId, aShowDisabled, null, null), new System.Func<System.IAsyncResult, ScheduledListArray>(this.EndGetScheduleActions));
        }
        
        public virtual System.IAsyncResult BeginGetMonitorActions(string aServiceId, bool aShowDisabled, System.AsyncCallback @__Callback, object @__UserData) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "GetMonitorActions");
                @__LocalMessage.WriteAnsiString("aServiceId", aServiceId);
                @__LocalMessage.WriteBoolean("aShowDisabled", aShowDisabled);
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex) {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }
        
        public virtual ScheduledListArray EndGetMonitorActions(System.IAsyncResult @__AsyncResult) {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try {
                ScheduledListArray Result = ((ScheduledListArray)(@__LocalMessage.Read("Result", typeof(ScheduledListArray), RemObjects.SDK.StreamingFormat.Default)));
                return Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual System.Threading.Tasks.Task<ScheduledListArray> GetMonitorActionsAsync(string aServiceId, bool aShowDisabled) {
            return System.Threading.Tasks.Task<ScheduledListArray>.Factory.FromAsync(this.BeginGetMonitorActions(aServiceId, aShowDisabled, null, null), new System.Func<System.IAsyncResult, ScheduledListArray>(this.EndGetMonitorActions));
        }
        
        public virtual System.IAsyncResult BeginGetExecutingActions(string aServiceId, bool aShowDisabled, System.AsyncCallback @__Callback, object @__UserData) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "GetExecutingActions");
                @__LocalMessage.WriteAnsiString("aServiceId", aServiceId);
                @__LocalMessage.WriteBoolean("aShowDisabled", aShowDisabled);
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex) {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }
        
        public virtual ScheduledListArray EndGetExecutingActions(System.IAsyncResult @__AsyncResult) {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try {
                ScheduledListArray Result = ((ScheduledListArray)(@__LocalMessage.Read("Result", typeof(ScheduledListArray), RemObjects.SDK.StreamingFormat.Default)));
                return Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual System.Threading.Tasks.Task<ScheduledListArray> GetExecutingActionsAsync(string aServiceId, bool aShowDisabled) {
            return System.Threading.Tasks.Task<ScheduledListArray>.Factory.FromAsync(this.BeginGetExecutingActions(aServiceId, aShowDisabled, null, null), new System.Func<System.IAsyncResult, ScheduledListArray>(this.EndGetExecutingActions));
        }
        
        public virtual System.IAsyncResult BeginGetTransportActions(string aServiceID, bool aShowDisabled, System.AsyncCallback @__Callback, object @__UserData) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "GetTransportActions");
                @__LocalMessage.WriteAnsiString("aServiceID", aServiceID);
                @__LocalMessage.WriteBoolean("aShowDisabled", aShowDisabled);
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex) {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }
        
        public virtual ScheduledListArray EndGetTransportActions(System.IAsyncResult @__AsyncResult) {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try {
                ScheduledListArray Result = ((ScheduledListArray)(@__LocalMessage.Read("Result", typeof(ScheduledListArray), RemObjects.SDK.StreamingFormat.Default)));
                return Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual System.Threading.Tasks.Task<ScheduledListArray> GetTransportActionsAsync(string aServiceID, bool aShowDisabled) {
            return System.Threading.Tasks.Task<ScheduledListArray>.Factory.FromAsync(this.BeginGetTransportActions(aServiceID, aShowDisabled, null, null), new System.Func<System.IAsyncResult, ScheduledListArray>(this.EndGetTransportActions));
        }
        
        public virtual System.IAsyncResult BeginGetPendingFiles(string aServiceID, System.AsyncCallback @__Callback, object @__UserData) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "GetPendingFiles");
                @__LocalMessage.WriteAnsiString("aServiceID", aServiceID);
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex) {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }
        
        public virtual ScheduledListArray EndGetPendingFiles(System.IAsyncResult @__AsyncResult) {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try {
                ScheduledListArray Result = ((ScheduledListArray)(@__LocalMessage.Read("Result", typeof(ScheduledListArray), RemObjects.SDK.StreamingFormat.Default)));
                return Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual System.Threading.Tasks.Task<ScheduledListArray> GetPendingFilesAsync(string aServiceID) {
            return System.Threading.Tasks.Task<ScheduledListArray>.Factory.FromAsync(this.BeginGetPendingFiles(aServiceID, null, null), new System.Func<System.IAsyncResult, ScheduledListArray>(this.EndGetPendingFiles));
        }
        
        public virtual System.IAsyncResult BeginGetServices(System.AsyncCallback @__Callback, object @__UserData) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "GetServices");
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex) {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }
        
        public virtual ServiceInfoList EndGetServices(System.IAsyncResult @__AsyncResult) {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try {
                ServiceInfoList Result = ((ServiceInfoList)(@__LocalMessage.Read("Result", typeof(ServiceInfoList), RemObjects.SDK.StreamingFormat.Default)));
                return Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual System.Threading.Tasks.Task<ServiceInfoList> GetServicesAsync() {
            return System.Threading.Tasks.Task<ServiceInfoList>.Factory.FromAsync(this.BeginGetServices(null, null), new System.Func<System.IAsyncResult, ServiceInfoList>(this.EndGetServices));
        }
        
        public virtual System.IAsyncResult BeginRegisterService(string aServiceId, string aDisplayName, string aPort, ServiceConnection aCon, string aServiceUser, string aServiceUserPass, System.AsyncCallback @__Callback, object @__UserData) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "RegisterService");
                @__LocalMessage.WriteAnsiString("aServiceId", aServiceId);
                @__LocalMessage.WriteAnsiString("aDisplayName", aDisplayName);
                @__LocalMessage.WriteAnsiString("aPort", aPort);
                @__LocalMessage.Write("aCon", aCon, typeof(ServiceConnection), RemObjects.SDK.StreamingFormat.Default);
                @__LocalMessage.WriteAnsiString("aServiceUser", aServiceUser);
                @__LocalMessage.WriteAnsiString("aServiceUserPass", aServiceUserPass);
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex) {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }
        
        public virtual void EndRegisterService(System.IAsyncResult @__AsyncResult) {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try {
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual System.Threading.Tasks.Task RegisterServiceAsync(string aServiceId, string aDisplayName, string aPort, ServiceConnection aCon, string aServiceUser, string aServiceUserPass) {
            return System.Threading.Tasks.Task.Factory.FromAsync(this.BeginRegisterService(aServiceId, aDisplayName, aPort, aCon, aServiceUser, aServiceUserPass, null, null), new System.Action<System.IAsyncResult>(this.EndRegisterService));
        }
        
        public virtual System.IAsyncResult BeginUnRegisterService(string aServiceId, System.AsyncCallback @__Callback, object @__UserData) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "UnRegisterService");
                @__LocalMessage.WriteAnsiString("aServiceId", aServiceId);
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex) {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }
        
        public virtual bool EndUnRegisterService(System.IAsyncResult @__AsyncResult) {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try {
                bool Result = @__LocalMessage.ReadBoolean("Result");
                return Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual System.Threading.Tasks.Task<bool> UnRegisterServiceAsync(string aServiceId) {
            return System.Threading.Tasks.Task<bool>.Factory.FromAsync(this.BeginUnRegisterService(aServiceId, null, null), new System.Func<System.IAsyncResult, bool>(this.EndUnRegisterService));
        }
        
        public virtual System.IAsyncResult BeginChangeService(string aServiceId, string aDisplayName, string aPort, string aServiceUser, string aServiceUserPass, System.AsyncCallback @__Callback, object @__UserData) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "ChangeService");
                @__LocalMessage.WriteAnsiString("aServiceId", aServiceId);
                @__LocalMessage.WriteAnsiString("aDisplayName", aDisplayName);
                @__LocalMessage.WriteAnsiString("aPort", aPort);
                @__LocalMessage.WriteAnsiString("aServiceUser", aServiceUser);
                @__LocalMessage.WriteAnsiString("aServiceUserPass", aServiceUserPass);
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex) {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }
        
        public virtual void EndChangeService(System.IAsyncResult @__AsyncResult) {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try {
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual System.Threading.Tasks.Task ChangeServiceAsync(string aServiceId, string aDisplayName, string aPort, string aServiceUser, string aServiceUserPass) {
            return System.Threading.Tasks.Task.Factory.FromAsync(this.BeginChangeService(aServiceId, aDisplayName, aPort, aServiceUser, aServiceUserPass, null, null), new System.Action<System.IAsyncResult>(this.EndChangeService));
        }
        
        public virtual System.IAsyncResult BeginChangeServiceUser(string aServiceId, string aDisplayName, string aPort, string aServiceUser, string aServiceUserPass, System.AsyncCallback @__Callback, object @__UserData) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "ChangeServiceUser");
                @__LocalMessage.WriteAnsiString("aServiceId", aServiceId);
                @__LocalMessage.WriteAnsiString("aDisplayName", aDisplayName);
                @__LocalMessage.WriteAnsiString("aPort", aPort);
                @__LocalMessage.WriteAnsiString("aServiceUser", aServiceUser);
                @__LocalMessage.WriteAnsiString("aServiceUserPass", aServiceUserPass);
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex) {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }
        
        public virtual void EndChangeServiceUser(System.IAsyncResult @__AsyncResult) {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try {
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual System.Threading.Tasks.Task ChangeServiceUserAsync(string aServiceId, string aDisplayName, string aPort, string aServiceUser, string aServiceUserPass) {
            return System.Threading.Tasks.Task.Factory.FromAsync(this.BeginChangeServiceUser(aServiceId, aDisplayName, aPort, aServiceUser, aServiceUserPass, null, null), new System.Action<System.IAsyncResult>(this.EndChangeServiceUser));
        }
        
        public virtual System.IAsyncResult BeginChangeServiceConnection(string aServiceId, ServiceConnection aCon, System.AsyncCallback @__Callback, object @__UserData) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "ChangeServiceConnection");
                @__LocalMessage.WriteAnsiString("aServiceId", aServiceId);
                @__LocalMessage.Write("aCon", aCon, typeof(ServiceConnection), RemObjects.SDK.StreamingFormat.Default);
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex) {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }
        
        public virtual void EndChangeServiceConnection(System.IAsyncResult @__AsyncResult) {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try {
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual System.Threading.Tasks.Task ChangeServiceConnectionAsync(string aServiceId, ServiceConnection aCon) {
            return System.Threading.Tasks.Task.Factory.FromAsync(this.BeginChangeServiceConnection(aServiceId, aCon, null, null), new System.Action<System.IAsyncResult>(this.EndChangeServiceConnection));
        }
        
        public virtual System.IAsyncResult BeginCheckServiceConnection(string aServiceId, ServiceConnection aCon, System.AsyncCallback @__Callback, object @__UserData) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "CheckServiceConnection");
                @__LocalMessage.WriteAnsiString("aServiceId", aServiceId);
                @__LocalMessage.Write("aCon", aCon, typeof(ServiceConnection), RemObjects.SDK.StreamingFormat.Default);
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex) {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }
        
        public virtual bool EndCheckServiceConnection(System.IAsyncResult @__AsyncResult) {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try {
                bool Result = @__LocalMessage.ReadBoolean("Result");
                return Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual System.Threading.Tasks.Task<bool> CheckServiceConnectionAsync(string aServiceId, ServiceConnection aCon) {
            return System.Threading.Tasks.Task<bool>.Factory.FromAsync(this.BeginCheckServiceConnection(aServiceId, aCon, null, null), new System.Func<System.IAsyncResult, bool>(this.EndCheckServiceConnection));
        }
        
        public virtual System.IAsyncResult BeginCheckServiceUser(string aServiceId, string aServiceUser, string aServiceUserPass, System.AsyncCallback @__Callback, object @__UserData) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "CheckServiceUser");
                @__LocalMessage.WriteAnsiString("aServiceId", aServiceId);
                @__LocalMessage.WriteAnsiString("aServiceUser", aServiceUser);
                @__LocalMessage.WriteAnsiString("aServiceUserPass", aServiceUserPass);
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex) {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }
        
        public virtual bool EndCheckServiceUser(System.IAsyncResult @__AsyncResult) {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try {
                bool Result = @__LocalMessage.ReadBoolean("Result");
                return Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual System.Threading.Tasks.Task<bool> CheckServiceUserAsync(string aServiceId, string aServiceUser, string aServiceUserPass) {
            return System.Threading.Tasks.Task<bool>.Factory.FromAsync(this.BeginCheckServiceUser(aServiceId, aServiceUser, aServiceUserPass, null, null), new System.Func<System.IAsyncResult, bool>(this.EndCheckServiceUser));
        }
        
        public virtual System.IAsyncResult BeginCheckServicePort(string aServiceId, string aPort, System.AsyncCallback @__Callback, object @__UserData) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "CheckServicePort");
                @__LocalMessage.WriteAnsiString("aServiceId", aServiceId);
                @__LocalMessage.WriteAnsiString("aPort", aPort);
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex) {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }
        
        public virtual bool EndCheckServicePort(System.IAsyncResult @__AsyncResult) {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try {
                bool Result = @__LocalMessage.ReadBoolean("Result");
                return Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual System.Threading.Tasks.Task<bool> CheckServicePortAsync(string aServiceId, string aPort) {
            return System.Threading.Tasks.Task<bool>.Factory.FromAsync(this.BeginCheckServicePort(aServiceId, aPort, null, null), new System.Func<System.IAsyncResult, bool>(this.EndCheckServicePort));
        }
        
        public virtual System.IAsyncResult BeginCheckUserLogonServiceRight(string aServiceUser, string aServiceUserPass, System.AsyncCallback @__Callback, object @__UserData) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "CheckUserLogonServiceRight");
                @__LocalMessage.WriteAnsiString("aServiceUser", aServiceUser);
                @__LocalMessage.WriteAnsiString("aServiceUserPass", aServiceUserPass);
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex) {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }
        
        public virtual bool EndCheckUserLogonServiceRight(System.IAsyncResult @__AsyncResult) {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try {
                bool Result = @__LocalMessage.ReadBoolean("Result");
                return Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual System.Threading.Tasks.Task<bool> CheckUserLogonServiceRightAsync(string aServiceUser, string aServiceUserPass) {
            return System.Threading.Tasks.Task<bool>.Factory.FromAsync(this.BeginCheckUserLogonServiceRight(aServiceUser, aServiceUserPass, null, null), new System.Func<System.IAsyncResult, bool>(this.EndCheckUserLogonServiceRight));
        }
        
        public virtual System.IAsyncResult BeginSetUserLogonServiceRight(string aServiceUser, string aServiceUserPass, System.AsyncCallback @__Callback, object @__UserData) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowMonitor", ActiveInterfaceName, "SetUserLogonServiceRight");
                @__LocalMessage.WriteAnsiString("aServiceUser", aServiceUser);
                @__LocalMessage.WriteAnsiString("aServiceUserPass", aServiceUserPass);
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex) {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }
        
        public virtual bool EndSetUserLogonServiceRight(System.IAsyncResult @__AsyncResult) {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try {
                bool Result = @__LocalMessage.ReadBoolean("Result");
                return Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual System.Threading.Tasks.Task<bool> SetUserLogonServiceRightAsync(string aServiceUser, string aServiceUserPass) {
            return System.Threading.Tasks.Task<bool>.Factory.FromAsync(this.BeginSetUserLogonServiceRight(aServiceUser, aServiceUserPass, null, null), new System.Func<System.IAsyncResult, bool>(this.EndSetUserLogonServiceRight));
        }
    }
    
    public class CoMonitorAdminAsync {
        
        public static IMonitorAdmin_Async Create(RemObjects.SDK.IMessage message, RemObjects.SDK.IClientChannel clientChannel) {
            return new MonitorAdmin_AsyncProxy(message, clientChannel);
        }
        
        public static IMonitorAdmin_Async Create(RemObjects.SDK.IRemoteService remoteService) {
            return new MonitorAdmin_AsyncProxy(remoteService);
        }
        
        public static IMonitorAdmin_Async Create(System.Uri uri) {
            return new MonitorAdmin_AsyncProxy(uri);
        }
        
        public static IMonitorAdmin_Async Create(string url) {
            return new MonitorAdmin_AsyncProxy(url);
        }
    }
}
