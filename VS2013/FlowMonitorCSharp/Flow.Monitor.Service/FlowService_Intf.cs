//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Requires RODL file FloBaseTypes (rodl\FloBaseTypes.rodl) in the same namespace.
// Requires RODL file FloServerActions (rodl\FloServerActions.rodl) in the same namespace.
namespace FlowService {
    using System;
    using System.Collections.Generic;
    using RemObjects.SDK;
    using RemObjects.SDK.Types;
    
    
    [RemObjects.SDK.Remotable()]
    [System.Reflection.ObfuscationAttribute(Exclude=true)]
    public enum TFloModuleType : int {
        
        fmtModule = 0,
        
        fmtTransport = 1,
        
        fmtDBCon = 2,
        
        fmtTransform = 3,
        
        fmtFileCon = 4,
        
        fmtDBSource = 5,
        
        fmtFileSource = 6,
        
        fmtReport = 7,
        
        fmtMap = 8,
        
        fmtAction = 9,
        
        fmtServer = 10,
        
        fmtWebApp = 11,
        
        fmtLog = 12,
        
        fmtSetup = 13,
        
        fmtUser = 14,
        
        fmtTradingPartner = 15,
        
        fmtMember = 16,
        
        fmtEDINetwork = 17,
    }
    
    [RemObjects.SDK.Remotable()]
    [System.Reflection.ObfuscationAttribute(Exclude=true)]
    public enum TFloScheduledType : int {
        
        fstScheduled = 0,
        
        fstMonitored = 1,
    }
    
    [RemObjects.SDK.Remotable()]
    [System.Reflection.ObfuscationAttribute(Exclude=true)]
    public enum TFloActionSettingType : int {
        
        fstDisable = 0,
        
        fstEnable = 1,
        
        fstPause = 2,
        
        fstResume = 3,
    }
    
    [System.Serializable()]
    [RemObjects.SDK.Remotable(ActivatorClass=typeof(ServiceConnection_Activator))]
    [System.Reflection.ObfuscationAttribute(Exclude=true)]
    public partial class ServiceConnection : RemObjects.SDK.Types.ComplexType {
        
        private string @__HostName;
        
        private string @__DatabaseName;
        
        private string @__UserName;
        
        private string @__Password;
        
        [RemObjects.SDK.StreamAs(RemObjects.SDK.StreamingFormat.AnsiString)]
        public virtual string HostName {
            get {
                return @__HostName;
            }
            set {
                @__HostName = value;
                this.TriggerPropertyChanged("HostName");
            }
        }
        
        [RemObjects.SDK.StreamAs(RemObjects.SDK.StreamingFormat.AnsiString)]
        public virtual string DatabaseName {
            get {
                return @__DatabaseName;
            }
            set {
                @__DatabaseName = value;
                this.TriggerPropertyChanged("DatabaseName");
            }
        }
        
        [RemObjects.SDK.StreamAs(RemObjects.SDK.StreamingFormat.AnsiString)]
        public virtual string UserName {
            get {
                return @__UserName;
            }
            set {
                @__UserName = value;
                this.TriggerPropertyChanged("UserName");
            }
        }
        
        [RemObjects.SDK.StreamAs(RemObjects.SDK.StreamingFormat.AnsiString)]
        public virtual string Password {
            get {
                return @__Password;
            }
            set {
                @__Password = value;
                this.TriggerPropertyChanged("Password");
            }
        }
        
        public override void ReadComplex(RemObjects.SDK.Serializer serializer) {
            if (serializer.RecordStrictOrder) {
                HostName = serializer.ReadAnsiString("HostName");
                DatabaseName = serializer.ReadAnsiString("DatabaseName");
                UserName = serializer.ReadAnsiString("UserName");
                Password = serializer.ReadAnsiString("Password");
            }
            else {
                DatabaseName = serializer.ReadAnsiString("DatabaseName");
                HostName = serializer.ReadAnsiString("HostName");
                Password = serializer.ReadAnsiString("Password");
                UserName = serializer.ReadAnsiString("UserName");
            }
        }
        
        public override void WriteComplex(RemObjects.SDK.Serializer serializer) {
            if (serializer.RecordStrictOrder) {
                serializer.WriteAnsiString("HostName", HostName);
                serializer.WriteAnsiString("DatabaseName", DatabaseName);
                serializer.WriteAnsiString("UserName", UserName);
                serializer.WriteAnsiString("Password", Password);
            }
            else {
                serializer.WriteAnsiString("DatabaseName", DatabaseName);
                serializer.WriteAnsiString("HostName", HostName);
                serializer.WriteAnsiString("Password", Password);
                serializer.WriteAnsiString("UserName", UserName);
            }
        }
    }
    
    [RemObjects.SDK.Activator()]
    [System.Reflection.ObfuscationAttribute(Exclude=true, ApplyToMembers=false)]
    public class ServiceConnection_Activator : object, RemObjects.SDK.ITypeActivator {
        
        public ServiceConnection_Activator() {
        }
        
        public object CreateInstance() {
            return new ServiceConnection();
        }
    }
    
    [System.Serializable()]
    [RemObjects.SDK.Remotable(ActivatorClass=typeof(ServiceInfo_Activator))]
    [System.Reflection.ObfuscationAttribute(Exclude=true)]
    public partial class ServiceInfo : RemObjects.SDK.Types.ComplexType {
        
        private string @__ServiceId;
        
        private string @__ServiceName;
        
        private string @__ServicePort;
        
        private string @__ServiceDisplayName;
        
        [RemObjects.SDK.StreamAs(RemObjects.SDK.StreamingFormat.AnsiString)]
        public virtual string ServiceId {
            get {
                return @__ServiceId;
            }
            set {
                @__ServiceId = value;
                this.TriggerPropertyChanged("ServiceId");
            }
        }
        
        [RemObjects.SDK.StreamAs(RemObjects.SDK.StreamingFormat.AnsiString)]
        public virtual string ServiceName {
            get {
                return @__ServiceName;
            }
            set {
                @__ServiceName = value;
                this.TriggerPropertyChanged("ServiceName");
            }
        }
        
        [RemObjects.SDK.StreamAs(RemObjects.SDK.StreamingFormat.AnsiString)]
        public virtual string ServicePort {
            get {
                return @__ServicePort;
            }
            set {
                @__ServicePort = value;
                this.TriggerPropertyChanged("ServicePort");
            }
        }
        
        [RemObjects.SDK.StreamAs(RemObjects.SDK.StreamingFormat.AnsiString)]
        public virtual string ServiceDisplayName {
            get {
                return @__ServiceDisplayName;
            }
            set {
                @__ServiceDisplayName = value;
                this.TriggerPropertyChanged("ServiceDisplayName");
            }
        }
        
        public override void ReadComplex(RemObjects.SDK.Serializer serializer) {
            if (serializer.RecordStrictOrder) {
                ServiceId = serializer.ReadAnsiString("ServiceId");
                ServiceName = serializer.ReadAnsiString("ServiceName");
                ServicePort = serializer.ReadAnsiString("ServicePort");
                ServiceDisplayName = serializer.ReadAnsiString("ServiceDisplayName");
            }
            else {
                ServiceDisplayName = serializer.ReadAnsiString("ServiceDisplayName");
                ServiceId = serializer.ReadAnsiString("ServiceId");
                ServiceName = serializer.ReadAnsiString("ServiceName");
                ServicePort = serializer.ReadAnsiString("ServicePort");
            }
        }
        
        public override void WriteComplex(RemObjects.SDK.Serializer serializer) {
            if (serializer.RecordStrictOrder) {
                serializer.WriteAnsiString("ServiceId", ServiceId);
                serializer.WriteAnsiString("ServiceName", ServiceName);
                serializer.WriteAnsiString("ServicePort", ServicePort);
                serializer.WriteAnsiString("ServiceDisplayName", ServiceDisplayName);
            }
            else {
                serializer.WriteAnsiString("ServiceDisplayName", ServiceDisplayName);
                serializer.WriteAnsiString("ServiceId", ServiceId);
                serializer.WriteAnsiString("ServiceName", ServiceName);
                serializer.WriteAnsiString("ServicePort", ServicePort);
            }
        }
    }
    
    [RemObjects.SDK.Activator()]
    [System.Reflection.ObfuscationAttribute(Exclude=true, ApplyToMembers=false)]
    public class ServiceInfo_Activator : object, RemObjects.SDK.ITypeActivator {
        
        public ServiceInfo_Activator() {
        }
        
        public object CreateInstance() {
            return new ServiceInfo();
        }
    }
    
    public interface IAdmin : RemObjects.SDK.IROService {
        
        bool SetActionStatus(int aIndex, TFloScheduledType aActionType, TFloActionSettingType aStatus);
        
        void LoadRemoteModule(string aModuleFIDS, TFloModuleType aModuleType, out RemObjects.SDK.Types.Binary aStream1, out RemObjects.SDK.Types.Binary aStream2);
        
        bool SaveRemoteModule(TFloModuleType aModuleType, RemObjects.SDK.Types.Binary aStream1, RemObjects.SDK.Types.Binary aStream2);
        
        string AddRemoteModule(TFloModuleType aModuleType, bool aRefresh, RemObjects.SDK.Types.Binary aStream1, RemObjects.SDK.Types.Binary aStream2);
        
        string[][] LoadModuleList(string aTable, string aIDField, string aNameField, string aDescription);
        
        string GetComputerName();
        
        bool Ping();
        
        bool RefreshActions();
        
        string[][] GetScheduleActions(bool aShowDisabled);
        
        string[][] GetMonitorActions(bool aShowDisabled);
        
        string[][] GetExecutingActions(bool aShowDisabled);
        
        string[][] GetTransportActions(bool aShowDisabled);
        
        string[][] GetPendingFiles();
        
        void CloseFlowTrayServer();
        
        void CloseServer();
    }
    
    public partial class Admin_Proxy : RemObjects.SDK.Proxy, IAdmin {
        
        public Admin_Proxy(RemObjects.SDK.IMessage message, RemObjects.SDK.IClientChannel clientChannel) : 
                base(message, clientChannel) {
        }
        
        public Admin_Proxy(RemObjects.SDK.IMessage message, RemObjects.SDK.IClientChannel clientChannel, string interfaceName) : 
                base(message, clientChannel, interfaceName) {
        }
        
        public Admin_Proxy(RemObjects.SDK.IRemoteService remoteService) : 
                base(remoteService) {
        }
        
        public Admin_Proxy(RemObjects.SDK.IRemoteService remoteService, string interfaceName) : 
                base(remoteService, interfaceName) {
        }
        
        public Admin_Proxy(System.Uri uri) : 
                base(uri) {
        }
        
        public Admin_Proxy(string url) : 
                base(url) {
        }
        
        public override string InterfaceName {
            get {
                return "Admin";
            }
        }
        
        public virtual bool SetActionStatus(int aIndex, TFloScheduledType aActionType, TFloActionSettingType aStatus) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowService", ActiveInterfaceName, "SetActionStatus");
                @__LocalMessage.WriteInt32("aIndex", aIndex);
                @__LocalMessage.Write("aActionType", aActionType, typeof(TFloScheduledType), RemObjects.SDK.StreamingFormat.Default);
                @__LocalMessage.Write("aStatus", aStatus, typeof(TFloActionSettingType), RemObjects.SDK.StreamingFormat.Default);
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
                bool _Result = @__LocalMessage.ReadBoolean("Result");
                return _Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual void LoadRemoteModule(string aModuleFIDS, TFloModuleType aModuleType, out RemObjects.SDK.Types.Binary aStream1, out RemObjects.SDK.Types.Binary aStream2) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowService", ActiveInterfaceName, "LoadRemoteModule");
                @__LocalMessage.WriteAnsiString("aModuleFIDS", aModuleFIDS);
                @__LocalMessage.Write("aModuleType", aModuleType, typeof(TFloModuleType), RemObjects.SDK.StreamingFormat.Default);
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
                aStream1 = ((RemObjects.SDK.Types.Binary)(@__LocalMessage.Read("aStream1", typeof(RemObjects.SDK.Types.Binary), RemObjects.SDK.StreamingFormat.Default)));
                aStream2 = ((RemObjects.SDK.Types.Binary)(@__LocalMessage.Read("aStream2", typeof(RemObjects.SDK.Types.Binary), RemObjects.SDK.StreamingFormat.Default)));
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual bool SaveRemoteModule(TFloModuleType aModuleType, RemObjects.SDK.Types.Binary aStream1, RemObjects.SDK.Types.Binary aStream2) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowService", ActiveInterfaceName, "SaveRemoteModule");
                @__LocalMessage.Write("aModuleType", aModuleType, typeof(TFloModuleType), RemObjects.SDK.StreamingFormat.Default);
                @__LocalMessage.Write("aStream1", aStream1, typeof(RemObjects.SDK.Types.Binary), RemObjects.SDK.StreamingFormat.Default);
                @__LocalMessage.Write("aStream2", aStream2, typeof(RemObjects.SDK.Types.Binary), RemObjects.SDK.StreamingFormat.Default);
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
                bool _Result = @__LocalMessage.ReadBoolean("Result");
                return _Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual string AddRemoteModule(TFloModuleType aModuleType, bool aRefresh, RemObjects.SDK.Types.Binary aStream1, RemObjects.SDK.Types.Binary aStream2) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowService", ActiveInterfaceName, "AddRemoteModule");
                @__LocalMessage.Write("aModuleType", aModuleType, typeof(TFloModuleType), RemObjects.SDK.StreamingFormat.Default);
                @__LocalMessage.WriteBoolean("aRefresh", aRefresh);
                @__LocalMessage.Write("aStream1", aStream1, typeof(RemObjects.SDK.Types.Binary), RemObjects.SDK.StreamingFormat.Default);
                @__LocalMessage.Write("aStream2", aStream2, typeof(RemObjects.SDK.Types.Binary), RemObjects.SDK.StreamingFormat.Default);
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
                string _Result = @__LocalMessage.ReadAnsiString("Result");
                return _Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual string[][] LoadModuleList(string aTable, string aIDField, string aNameField, string aDescription) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowService", ActiveInterfaceName, "LoadModuleList");
                @__LocalMessage.WriteAnsiString("aTable", aTable);
                @__LocalMessage.WriteAnsiString("aIDField", aIDField);
                @__LocalMessage.WriteAnsiString("aNameField", aNameField);
                @__LocalMessage.WriteAnsiString("aDescription", aDescription);
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
                string[][] _Result = ((string[][])(@__LocalMessage.Read("Result", typeof(string[][]), RemObjects.SDK.StreamingFormat.AnsiString)));
                return _Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual string GetComputerName() {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowService", ActiveInterfaceName, "GetComputerName");
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
                string _Result = @__LocalMessage.ReadAnsiString("Result");
                return _Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual bool Ping() {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowService", ActiveInterfaceName, "Ping");
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
                bool _Result = @__LocalMessage.ReadBoolean("Result");
                return _Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual bool RefreshActions() {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowService", ActiveInterfaceName, "RefreshActions");
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
                bool _Result = @__LocalMessage.ReadBoolean("Result");
                return _Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual string[][] GetScheduleActions(bool aShowDisabled) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowService", ActiveInterfaceName, "GetScheduleActions");
                @__LocalMessage.WriteBoolean("aShowDisabled", aShowDisabled);
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
                string[][] _Result = ((string[][])(@__LocalMessage.Read("Result", typeof(string[][]), RemObjects.SDK.StreamingFormat.AnsiString)));
                return _Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual string[][] GetMonitorActions(bool aShowDisabled) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowService", ActiveInterfaceName, "GetMonitorActions");
                @__LocalMessage.WriteBoolean("aShowDisabled", aShowDisabled);
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
                string[][] _Result = ((string[][])(@__LocalMessage.Read("Result", typeof(string[][]), RemObjects.SDK.StreamingFormat.AnsiString)));
                return _Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual string[][] GetExecutingActions(bool aShowDisabled) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowService", ActiveInterfaceName, "GetExecutingActions");
                @__LocalMessage.WriteBoolean("aShowDisabled", aShowDisabled);
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
                string[][] _Result = ((string[][])(@__LocalMessage.Read("Result", typeof(string[][]), RemObjects.SDK.StreamingFormat.AnsiString)));
                return _Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual string[][] GetTransportActions(bool aShowDisabled) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowService", ActiveInterfaceName, "GetTransportActions");
                @__LocalMessage.WriteBoolean("aShowDisabled", aShowDisabled);
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
                string[][] _Result = ((string[][])(@__LocalMessage.Read("Result", typeof(string[][]), RemObjects.SDK.StreamingFormat.AnsiString)));
                return _Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual string[][] GetPendingFiles() {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowService", ActiveInterfaceName, "GetPendingFiles");
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
                string[][] _Result = ((string[][])(@__LocalMessage.Read("Result", typeof(string[][]), RemObjects.SDK.StreamingFormat.AnsiString)));
                return _Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual void CloseFlowTrayServer() {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowService", ActiveInterfaceName, "CloseFlowTrayServer");
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual void CloseServer() {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowService", ActiveInterfaceName, "CloseServer");
                @__LocalMessage.FinalizeMessage();
                ClientChannel.Dispatch(@__LocalMessage);
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
    }
    
    public class CoAdmin {
        
        public static IAdmin Create(RemObjects.SDK.IMessage message, RemObjects.SDK.IClientChannel clientChannel) {
            return new Admin_Proxy(message, clientChannel);
        }
        
        public static IAdmin Create(RemObjects.SDK.IRemoteService remoteService) {
            return new Admin_Proxy(remoteService);
        }
        
        public static IAdmin Create(System.Uri uri) {
            return new Admin_Proxy(uri);
        }
        
        public static IAdmin Create(string url) {
            return new Admin_Proxy(url);
        }
    }
    
    public interface IAdmin_Async : RemObjects.SDK.IROService_Async {
        
        System.IAsyncResult BeginSetActionStatus(int aIndex, TFloScheduledType aActionType, TFloActionSettingType aStatus, System.AsyncCallback @__Callback, object @__UserData);
        
        bool EndSetActionStatus(System.IAsyncResult @__AsyncResult);
        
        System.Threading.Tasks.Task<bool> SetActionStatusAsync(int aIndex, TFloScheduledType aActionType, TFloActionSettingType aStatus);
        
        System.IAsyncResult BeginLoadRemoteModule(string aModuleFIDS, TFloModuleType aModuleType, System.AsyncCallback @__Callback, object @__UserData);
        
        void EndLoadRemoteModule(System.IAsyncResult @__AsyncResult, out RemObjects.SDK.Types.Binary aStream1, out RemObjects.SDK.Types.Binary aStream2);
        
        System.IAsyncResult BeginSaveRemoteModule(TFloModuleType aModuleType, RemObjects.SDK.Types.Binary aStream1, RemObjects.SDK.Types.Binary aStream2, System.AsyncCallback @__Callback, object @__UserData);
        
        bool EndSaveRemoteModule(System.IAsyncResult @__AsyncResult);
        
        System.Threading.Tasks.Task<bool> SaveRemoteModuleAsync(TFloModuleType aModuleType, RemObjects.SDK.Types.Binary aStream1, RemObjects.SDK.Types.Binary aStream2);
        
        System.IAsyncResult BeginAddRemoteModule(TFloModuleType aModuleType, bool aRefresh, RemObjects.SDK.Types.Binary aStream1, RemObjects.SDK.Types.Binary aStream2, System.AsyncCallback @__Callback, object @__UserData);
        
        string EndAddRemoteModule(System.IAsyncResult @__AsyncResult);
        
        System.Threading.Tasks.Task<string> AddRemoteModuleAsync(TFloModuleType aModuleType, bool aRefresh, RemObjects.SDK.Types.Binary aStream1, RemObjects.SDK.Types.Binary aStream2);
        
        System.IAsyncResult BeginLoadModuleList(string aTable, string aIDField, string aNameField, string aDescription, System.AsyncCallback @__Callback, object @__UserData);
        
        string[][] EndLoadModuleList(System.IAsyncResult @__AsyncResult);
        
        System.Threading.Tasks.Task<string[][]> LoadModuleListAsync(string aTable, string aIDField, string aNameField, string aDescription);
        
        System.IAsyncResult BeginGetComputerName(System.AsyncCallback @__Callback, object @__UserData);
        
        string EndGetComputerName(System.IAsyncResult @__AsyncResult);
        
        System.Threading.Tasks.Task<string> GetComputerNameAsync();
        
        System.IAsyncResult BeginPing(System.AsyncCallback @__Callback, object @__UserData);
        
        bool EndPing(System.IAsyncResult @__AsyncResult);
        
        System.Threading.Tasks.Task<bool> PingAsync();
        
        System.IAsyncResult BeginRefreshActions(System.AsyncCallback @__Callback, object @__UserData);
        
        bool EndRefreshActions(System.IAsyncResult @__AsyncResult);
        
        System.Threading.Tasks.Task<bool> RefreshActionsAsync();
        
        System.IAsyncResult BeginGetScheduleActions(bool aShowDisabled, System.AsyncCallback @__Callback, object @__UserData);
        
        string[][] EndGetScheduleActions(System.IAsyncResult @__AsyncResult);
        
        System.Threading.Tasks.Task<string[][]> GetScheduleActionsAsync(bool aShowDisabled);
        
        System.IAsyncResult BeginGetMonitorActions(bool aShowDisabled, System.AsyncCallback @__Callback, object @__UserData);
        
        string[][] EndGetMonitorActions(System.IAsyncResult @__AsyncResult);
        
        System.Threading.Tasks.Task<string[][]> GetMonitorActionsAsync(bool aShowDisabled);
        
        System.IAsyncResult BeginGetExecutingActions(bool aShowDisabled, System.AsyncCallback @__Callback, object @__UserData);
        
        string[][] EndGetExecutingActions(System.IAsyncResult @__AsyncResult);
        
        System.Threading.Tasks.Task<string[][]> GetExecutingActionsAsync(bool aShowDisabled);
        
        System.IAsyncResult BeginGetTransportActions(bool aShowDisabled, System.AsyncCallback @__Callback, object @__UserData);
        
        string[][] EndGetTransportActions(System.IAsyncResult @__AsyncResult);
        
        System.Threading.Tasks.Task<string[][]> GetTransportActionsAsync(bool aShowDisabled);
        
        System.IAsyncResult BeginGetPendingFiles(System.AsyncCallback @__Callback, object @__UserData);
        
        string[][] EndGetPendingFiles(System.IAsyncResult @__AsyncResult);
        
        System.Threading.Tasks.Task<string[][]> GetPendingFilesAsync();
        
        System.IAsyncResult BeginCloseFlowTrayServer(System.AsyncCallback @__Callback, object @__UserData);
        
        void EndCloseFlowTrayServer(System.IAsyncResult @__AsyncResult);
        
        System.Threading.Tasks.Task CloseFlowTrayServerAsync();
        
        System.IAsyncResult BeginCloseServer(System.AsyncCallback @__Callback, object @__UserData);
        
        void EndCloseServer(System.IAsyncResult @__AsyncResult);
        
        System.Threading.Tasks.Task CloseServerAsync();
    }
    
    public partial class Admin_AsyncProxy : RemObjects.SDK.AsyncProxy, IAdmin_Async {
        
        public Admin_AsyncProxy(RemObjects.SDK.IMessage message, RemObjects.SDK.IClientChannel clientChannel) : 
                base(message, clientChannel) {
        }
        
        public Admin_AsyncProxy(RemObjects.SDK.IMessage message, RemObjects.SDK.IClientChannel clientChannel, string interfaceName) : 
                base(message, clientChannel, interfaceName) {
        }
        
        public Admin_AsyncProxy(RemObjects.SDK.IRemoteService remoteService) : 
                base(remoteService) {
        }
        
        public Admin_AsyncProxy(RemObjects.SDK.IRemoteService remoteService, string interfaceName) : 
                base(remoteService, interfaceName) {
        }
        
        public Admin_AsyncProxy(System.Uri uri) : 
                base(uri) {
        }
        
        public Admin_AsyncProxy(string url) : 
                base(url) {
        }
        
        public override string InterfaceName {
            get {
                return "Admin";
            }
        }
        
        public virtual System.IAsyncResult BeginSetActionStatus(int aIndex, TFloScheduledType aActionType, TFloActionSettingType aStatus, System.AsyncCallback @__Callback, object @__UserData) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowService", ActiveInterfaceName, "SetActionStatus");
                @__LocalMessage.WriteInt32("aIndex", aIndex);
                @__LocalMessage.Write("aActionType", aActionType, typeof(TFloScheduledType), RemObjects.SDK.StreamingFormat.Default);
                @__LocalMessage.Write("aStatus", aStatus, typeof(TFloActionSettingType), RemObjects.SDK.StreamingFormat.Default);
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex) {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }
        
        public virtual bool EndSetActionStatus(System.IAsyncResult @__AsyncResult) {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try {
                bool Result = @__LocalMessage.ReadBoolean("Result");
                return Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual System.Threading.Tasks.Task<bool> SetActionStatusAsync(int aIndex, TFloScheduledType aActionType, TFloActionSettingType aStatus) {
            return System.Threading.Tasks.Task<bool>.Factory.FromAsync(this.BeginSetActionStatus(aIndex, aActionType, aStatus, null, null), new System.Func<System.IAsyncResult, bool>(this.EndSetActionStatus));
        }
        
        public virtual System.IAsyncResult BeginLoadRemoteModule(string aModuleFIDS, TFloModuleType aModuleType, System.AsyncCallback @__Callback, object @__UserData) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowService", ActiveInterfaceName, "LoadRemoteModule");
                @__LocalMessage.WriteAnsiString("aModuleFIDS", aModuleFIDS);
                @__LocalMessage.Write("aModuleType", aModuleType, typeof(TFloModuleType), RemObjects.SDK.StreamingFormat.Default);
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex) {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }
        
        public virtual void EndLoadRemoteModule(System.IAsyncResult @__AsyncResult, out RemObjects.SDK.Types.Binary aStream1, out RemObjects.SDK.Types.Binary aStream2) {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try {
                aStream1 = ((RemObjects.SDK.Types.Binary)(@__LocalMessage.Read("aStream1", typeof(RemObjects.SDK.Types.Binary), RemObjects.SDK.StreamingFormat.Default)));
                aStream2 = ((RemObjects.SDK.Types.Binary)(@__LocalMessage.Read("aStream2", typeof(RemObjects.SDK.Types.Binary), RemObjects.SDK.StreamingFormat.Default)));
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual System.IAsyncResult BeginSaveRemoteModule(TFloModuleType aModuleType, RemObjects.SDK.Types.Binary aStream1, RemObjects.SDK.Types.Binary aStream2, System.AsyncCallback @__Callback, object @__UserData) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowService", ActiveInterfaceName, "SaveRemoteModule");
                @__LocalMessage.Write("aModuleType", aModuleType, typeof(TFloModuleType), RemObjects.SDK.StreamingFormat.Default);
                @__LocalMessage.Write("aStream1", aStream1, typeof(RemObjects.SDK.Types.Binary), RemObjects.SDK.StreamingFormat.Default);
                @__LocalMessage.Write("aStream2", aStream2, typeof(RemObjects.SDK.Types.Binary), RemObjects.SDK.StreamingFormat.Default);
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex) {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }
        
        public virtual bool EndSaveRemoteModule(System.IAsyncResult @__AsyncResult) {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try {
                bool Result = @__LocalMessage.ReadBoolean("Result");
                return Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual System.Threading.Tasks.Task<bool> SaveRemoteModuleAsync(TFloModuleType aModuleType, RemObjects.SDK.Types.Binary aStream1, RemObjects.SDK.Types.Binary aStream2) {
            return System.Threading.Tasks.Task<bool>.Factory.FromAsync(this.BeginSaveRemoteModule(aModuleType, aStream1, aStream2, null, null), new System.Func<System.IAsyncResult, bool>(this.EndSaveRemoteModule));
        }
        
        public virtual System.IAsyncResult BeginAddRemoteModule(TFloModuleType aModuleType, bool aRefresh, RemObjects.SDK.Types.Binary aStream1, RemObjects.SDK.Types.Binary aStream2, System.AsyncCallback @__Callback, object @__UserData) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowService", ActiveInterfaceName, "AddRemoteModule");
                @__LocalMessage.Write("aModuleType", aModuleType, typeof(TFloModuleType), RemObjects.SDK.StreamingFormat.Default);
                @__LocalMessage.WriteBoolean("aRefresh", aRefresh);
                @__LocalMessage.Write("aStream1", aStream1, typeof(RemObjects.SDK.Types.Binary), RemObjects.SDK.StreamingFormat.Default);
                @__LocalMessage.Write("aStream2", aStream2, typeof(RemObjects.SDK.Types.Binary), RemObjects.SDK.StreamingFormat.Default);
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex) {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }
        
        public virtual string EndAddRemoteModule(System.IAsyncResult @__AsyncResult) {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try {
                string Result = @__LocalMessage.ReadAnsiString("Result");
                return Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual System.Threading.Tasks.Task<string> AddRemoteModuleAsync(TFloModuleType aModuleType, bool aRefresh, RemObjects.SDK.Types.Binary aStream1, RemObjects.SDK.Types.Binary aStream2) {
            return System.Threading.Tasks.Task<string>.Factory.FromAsync(this.BeginAddRemoteModule(aModuleType, aRefresh, aStream1, aStream2, null, null), new System.Func<System.IAsyncResult, string>(this.EndAddRemoteModule));
        }
        
        public virtual System.IAsyncResult BeginLoadModuleList(string aTable, string aIDField, string aNameField, string aDescription, System.AsyncCallback @__Callback, object @__UserData) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowService", ActiveInterfaceName, "LoadModuleList");
                @__LocalMessage.WriteAnsiString("aTable", aTable);
                @__LocalMessage.WriteAnsiString("aIDField", aIDField);
                @__LocalMessage.WriteAnsiString("aNameField", aNameField);
                @__LocalMessage.WriteAnsiString("aDescription", aDescription);
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex) {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }
        
        public virtual string[][] EndLoadModuleList(System.IAsyncResult @__AsyncResult) {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try {
                string[][] Result = ((string[][])(@__LocalMessage.Read("Result", typeof(string[][]), RemObjects.SDK.StreamingFormat.AnsiString)));
                return Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual System.Threading.Tasks.Task<string[][]> LoadModuleListAsync(string aTable, string aIDField, string aNameField, string aDescription) {
            return System.Threading.Tasks.Task<string[][]>.Factory.FromAsync(this.BeginLoadModuleList(aTable, aIDField, aNameField, aDescription, null, null), new System.Func<System.IAsyncResult, string[][]>(this.EndLoadModuleList));
        }
        
        public virtual System.IAsyncResult BeginGetComputerName(System.AsyncCallback @__Callback, object @__UserData) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowService", ActiveInterfaceName, "GetComputerName");
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex) {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }
        
        public virtual string EndGetComputerName(System.IAsyncResult @__AsyncResult) {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try {
                string Result = @__LocalMessage.ReadAnsiString("Result");
                return Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual System.Threading.Tasks.Task<string> GetComputerNameAsync() {
            return System.Threading.Tasks.Task<string>.Factory.FromAsync(this.BeginGetComputerName(null, null), new System.Func<System.IAsyncResult, string>(this.EndGetComputerName));
        }
        
        public virtual System.IAsyncResult BeginPing(System.AsyncCallback @__Callback, object @__UserData) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowService", ActiveInterfaceName, "Ping");
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex) {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }
        
        public virtual bool EndPing(System.IAsyncResult @__AsyncResult) {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try {
                bool Result = @__LocalMessage.ReadBoolean("Result");
                return Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual System.Threading.Tasks.Task<bool> PingAsync() {
            return System.Threading.Tasks.Task<bool>.Factory.FromAsync(this.BeginPing(null, null), new System.Func<System.IAsyncResult, bool>(this.EndPing));
        }
        
        public virtual System.IAsyncResult BeginRefreshActions(System.AsyncCallback @__Callback, object @__UserData) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowService", ActiveInterfaceName, "RefreshActions");
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex) {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }
        
        public virtual bool EndRefreshActions(System.IAsyncResult @__AsyncResult) {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try {
                bool Result = @__LocalMessage.ReadBoolean("Result");
                return Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual System.Threading.Tasks.Task<bool> RefreshActionsAsync() {
            return System.Threading.Tasks.Task<bool>.Factory.FromAsync(this.BeginRefreshActions(null, null), new System.Func<System.IAsyncResult, bool>(this.EndRefreshActions));
        }
        
        public virtual System.IAsyncResult BeginGetScheduleActions(bool aShowDisabled, System.AsyncCallback @__Callback, object @__UserData) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowService", ActiveInterfaceName, "GetScheduleActions");
                @__LocalMessage.WriteBoolean("aShowDisabled", aShowDisabled);
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex) {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }
        
        public virtual string[][] EndGetScheduleActions(System.IAsyncResult @__AsyncResult) {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try {
                string[][] Result = ((string[][])(@__LocalMessage.Read("Result", typeof(string[][]), RemObjects.SDK.StreamingFormat.AnsiString)));
                return Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual System.Threading.Tasks.Task<string[][]> GetScheduleActionsAsync(bool aShowDisabled) {
            return System.Threading.Tasks.Task<string[][]>.Factory.FromAsync(this.BeginGetScheduleActions(aShowDisabled, null, null), new System.Func<System.IAsyncResult, string[][]>(this.EndGetScheduleActions));
        }
        
        public virtual System.IAsyncResult BeginGetMonitorActions(bool aShowDisabled, System.AsyncCallback @__Callback, object @__UserData) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowService", ActiveInterfaceName, "GetMonitorActions");
                @__LocalMessage.WriteBoolean("aShowDisabled", aShowDisabled);
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex) {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }
        
        public virtual string[][] EndGetMonitorActions(System.IAsyncResult @__AsyncResult) {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try {
                string[][] Result = ((string[][])(@__LocalMessage.Read("Result", typeof(string[][]), RemObjects.SDK.StreamingFormat.AnsiString)));
                return Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual System.Threading.Tasks.Task<string[][]> GetMonitorActionsAsync(bool aShowDisabled) {
            return System.Threading.Tasks.Task<string[][]>.Factory.FromAsync(this.BeginGetMonitorActions(aShowDisabled, null, null), new System.Func<System.IAsyncResult, string[][]>(this.EndGetMonitorActions));
        }
        
        public virtual System.IAsyncResult BeginGetExecutingActions(bool aShowDisabled, System.AsyncCallback @__Callback, object @__UserData) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowService", ActiveInterfaceName, "GetExecutingActions");
                @__LocalMessage.WriteBoolean("aShowDisabled", aShowDisabled);
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex) {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }
        
        public virtual string[][] EndGetExecutingActions(System.IAsyncResult @__AsyncResult) {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try {
                string[][] Result = ((string[][])(@__LocalMessage.Read("Result", typeof(string[][]), RemObjects.SDK.StreamingFormat.AnsiString)));
                return Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual System.Threading.Tasks.Task<string[][]> GetExecutingActionsAsync(bool aShowDisabled) {
            return System.Threading.Tasks.Task<string[][]>.Factory.FromAsync(this.BeginGetExecutingActions(aShowDisabled, null, null), new System.Func<System.IAsyncResult, string[][]>(this.EndGetExecutingActions));
        }
        
        public virtual System.IAsyncResult BeginGetTransportActions(bool aShowDisabled, System.AsyncCallback @__Callback, object @__UserData) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowService", ActiveInterfaceName, "GetTransportActions");
                @__LocalMessage.WriteBoolean("aShowDisabled", aShowDisabled);
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex) {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }
        
        public virtual string[][] EndGetTransportActions(System.IAsyncResult @__AsyncResult) {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try {
                string[][] Result = ((string[][])(@__LocalMessage.Read("Result", typeof(string[][]), RemObjects.SDK.StreamingFormat.AnsiString)));
                return Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual System.Threading.Tasks.Task<string[][]> GetTransportActionsAsync(bool aShowDisabled) {
            return System.Threading.Tasks.Task<string[][]>.Factory.FromAsync(this.BeginGetTransportActions(aShowDisabled, null, null), new System.Func<System.IAsyncResult, string[][]>(this.EndGetTransportActions));
        }
        
        public virtual System.IAsyncResult BeginGetPendingFiles(System.AsyncCallback @__Callback, object @__UserData) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowService", ActiveInterfaceName, "GetPendingFiles");
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex) {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }
        
        public virtual string[][] EndGetPendingFiles(System.IAsyncResult @__AsyncResult) {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try {
                string[][] Result = ((string[][])(@__LocalMessage.Read("Result", typeof(string[][]), RemObjects.SDK.StreamingFormat.AnsiString)));
                return Result;
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual System.Threading.Tasks.Task<string[][]> GetPendingFilesAsync() {
            return System.Threading.Tasks.Task<string[][]>.Factory.FromAsync(this.BeginGetPendingFiles(null, null), new System.Func<System.IAsyncResult, string[][]>(this.EndGetPendingFiles));
        }
        
        public virtual System.IAsyncResult BeginCloseFlowTrayServer(System.AsyncCallback @__Callback, object @__UserData) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowService", ActiveInterfaceName, "CloseFlowTrayServer");
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex) {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }
        
        public virtual void EndCloseFlowTrayServer(System.IAsyncResult @__AsyncResult) {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try {
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual System.Threading.Tasks.Task CloseFlowTrayServerAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(this.BeginCloseFlowTrayServer(null, null), new System.Action<System.IAsyncResult>(this.EndCloseFlowTrayServer));
        }
        
        public virtual System.IAsyncResult BeginCloseServer(System.AsyncCallback @__Callback, object @__UserData) {
            RemObjects.SDK.IMessage @__LocalMessage = this.@__GetMessage();
            try {
                @__LocalMessage.InitializeRequestMessage(ClientChannel, "FlowService", ActiveInterfaceName, "CloseServer");
                @__LocalMessage.FinalizeMessage();
                return ClientChannel.AsyncDispatch(@__LocalMessage, @__Callback, @__UserData);
            }
            catch (System.Exception ex) {
                this.@__ClearMessage(@__LocalMessage);
                throw ex;
            }
        }
        
        public virtual void EndCloseServer(System.IAsyncResult @__AsyncResult) {
            RemObjects.SDK.IMessage @__LocalMessage = ((RemObjects.SDK.IClientAsyncResult)(@__AsyncResult)).Message;
            try {
            }
            finally {
                this.@__ClearMessage(@__LocalMessage);
            }
        }
        
        public virtual System.Threading.Tasks.Task CloseServerAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(this.BeginCloseServer(null, null), new System.Action<System.IAsyncResult>(this.EndCloseServer));
        }
    }
    
    public class CoAdminAsync {
        
        public static IAdmin_Async Create(RemObjects.SDK.IMessage message, RemObjects.SDK.IClientChannel clientChannel) {
            return new Admin_AsyncProxy(message, clientChannel);
        }
        
        public static IAdmin_Async Create(RemObjects.SDK.IRemoteService remoteService) {
            return new Admin_AsyncProxy(remoteService);
        }
        
        public static IAdmin_Async Create(System.Uri uri) {
            return new Admin_AsyncProxy(uri);
        }
        
        public static IAdmin_Async Create(string url) {
            return new Admin_AsyncProxy(url);
        }
    }
}
