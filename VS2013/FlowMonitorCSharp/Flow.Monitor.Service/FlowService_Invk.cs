//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Requires RODL file FloBaseTypes (rodl\FloBaseTypes.rodl) in the same namespace.
// Requires RODL file FloServerActions (rodl\FloServerActions.rodl) in the same namespace.
namespace FlowService {
    using System;
    using System.Collections.Generic;
    using RemObjects.SDK;
    using RemObjects.SDK.Types;
    using RemObjects.SDK.Server;
    using RemObjects.SDK.Server.ClassFactories;
    
    
    [RemObjects.SDK.Server.Invoker()]
    [System.Reflection.ObfuscationAttribute(Exclude=true)]
    public class Admin_Invoker {
        
        public Admin_Invoker() : 
                base() {
        }
        
        public static void Invoke_SetActionStatus(RemObjects.SDK.IROService @__Instance, RemObjects.SDK.IMessage @__Message, RemObjects.SDK.Server.IServerChannelInfo @__ServerChannelInfo, out RemObjects.SDK.Server.ResponseOptions @__oResponseOptions) {
            RemObjects.SDK.ObjectDisposer @__ObjectDisposer = new RemObjects.SDK.ObjectDisposer(2);
            try {
                int aIndex = @__Message.ReadInt32("aIndex");
                TFloScheduledType aActionType = ((TFloScheduledType)(@__Message.Read("aActionType", typeof(TFloScheduledType), RemObjects.SDK.StreamingFormat.Default)));
                TFloActionSettingType aStatus = ((TFloActionSettingType)(@__Message.Read("aStatus", typeof(TFloActionSettingType), RemObjects.SDK.StreamingFormat.Default)));
                @__ObjectDisposer.Add(aActionType);
                @__ObjectDisposer.Add(aStatus);
                bool Result;
                Result = ((IAdmin)(@__Instance)).SetActionStatus(aIndex, aActionType, aStatus);
                @__Message.InitializeResponseMessage(@__ServerChannelInfo, "FlowService", "Admin", "SetActionStatusResponse");
                @__Message.WriteBoolean("Result", Result);
                @__Message.FinalizeMessage();
                @__oResponseOptions = RemObjects.SDK.Server.ResponseOptions.roDefault;
            }
            finally {
                @__ObjectDisposer.Dispose();
            }
        }
        
        public static void Invoke_LoadRemoteModule(RemObjects.SDK.IROService @__Instance, RemObjects.SDK.IMessage @__Message, RemObjects.SDK.Server.IServerChannelInfo @__ServerChannelInfo, out RemObjects.SDK.Server.ResponseOptions @__oResponseOptions) {
            RemObjects.SDK.ObjectDisposer @__ObjectDisposer = new RemObjects.SDK.ObjectDisposer(3);
            try {
                string aModuleFIDS = @__Message.ReadAnsiString("aModuleFIDS");
                TFloModuleType aModuleType = ((TFloModuleType)(@__Message.Read("aModuleType", typeof(TFloModuleType), RemObjects.SDK.StreamingFormat.Default)));
                @__ObjectDisposer.Add(aModuleType);
                RemObjects.SDK.Types.Binary aStream1;
                RemObjects.SDK.Types.Binary aStream2;
                ((IAdmin)(@__Instance)).LoadRemoteModule(aModuleFIDS, aModuleType, out aStream1, out aStream2);
                @__ObjectDisposer.Add(aStream1);
                @__ObjectDisposer.Add(aStream2);
                @__Message.InitializeResponseMessage(@__ServerChannelInfo, "FlowService", "Admin", "LoadRemoteModuleResponse");
                @__Message.Write("aStream1", aStream1, typeof(RemObjects.SDK.Types.Binary), RemObjects.SDK.StreamingFormat.Default);
                @__Message.Write("aStream2", aStream2, typeof(RemObjects.SDK.Types.Binary), RemObjects.SDK.StreamingFormat.Default);
                @__Message.FinalizeMessage();
                @__oResponseOptions = RemObjects.SDK.Server.ResponseOptions.roDefault;
            }
            finally {
                @__ObjectDisposer.Dispose();
            }
        }
        
        public static void Invoke_SaveRemoteModule(RemObjects.SDK.IROService @__Instance, RemObjects.SDK.IMessage @__Message, RemObjects.SDK.Server.IServerChannelInfo @__ServerChannelInfo, out RemObjects.SDK.Server.ResponseOptions @__oResponseOptions) {
            RemObjects.SDK.ObjectDisposer @__ObjectDisposer = new RemObjects.SDK.ObjectDisposer(3);
            try {
                TFloModuleType aModuleType = ((TFloModuleType)(@__Message.Read("aModuleType", typeof(TFloModuleType), RemObjects.SDK.StreamingFormat.Default)));
                RemObjects.SDK.Types.Binary aStream1 = ((RemObjects.SDK.Types.Binary)(@__Message.Read("aStream1", typeof(RemObjects.SDK.Types.Binary), RemObjects.SDK.StreamingFormat.Default)));
                RemObjects.SDK.Types.Binary aStream2 = ((RemObjects.SDK.Types.Binary)(@__Message.Read("aStream2", typeof(RemObjects.SDK.Types.Binary), RemObjects.SDK.StreamingFormat.Default)));
                @__ObjectDisposer.Add(aModuleType);
                @__ObjectDisposer.Add(aStream1);
                @__ObjectDisposer.Add(aStream2);
                bool Result;
                Result = ((IAdmin)(@__Instance)).SaveRemoteModule(aModuleType, aStream1, aStream2);
                @__Message.InitializeResponseMessage(@__ServerChannelInfo, "FlowService", "Admin", "SaveRemoteModuleResponse");
                @__Message.WriteBoolean("Result", Result);
                @__Message.FinalizeMessage();
                @__oResponseOptions = RemObjects.SDK.Server.ResponseOptions.roDefault;
            }
            finally {
                @__ObjectDisposer.Dispose();
            }
        }
        
        public static void Invoke_AddRemoteModule(RemObjects.SDK.IROService @__Instance, RemObjects.SDK.IMessage @__Message, RemObjects.SDK.Server.IServerChannelInfo @__ServerChannelInfo, out RemObjects.SDK.Server.ResponseOptions @__oResponseOptions) {
            RemObjects.SDK.ObjectDisposer @__ObjectDisposer = new RemObjects.SDK.ObjectDisposer(3);
            try {
                TFloModuleType aModuleType = ((TFloModuleType)(@__Message.Read("aModuleType", typeof(TFloModuleType), RemObjects.SDK.StreamingFormat.Default)));
                bool aRefresh = @__Message.ReadBoolean("aRefresh");
                RemObjects.SDK.Types.Binary aStream1 = ((RemObjects.SDK.Types.Binary)(@__Message.Read("aStream1", typeof(RemObjects.SDK.Types.Binary), RemObjects.SDK.StreamingFormat.Default)));
                RemObjects.SDK.Types.Binary aStream2 = ((RemObjects.SDK.Types.Binary)(@__Message.Read("aStream2", typeof(RemObjects.SDK.Types.Binary), RemObjects.SDK.StreamingFormat.Default)));
                @__ObjectDisposer.Add(aModuleType);
                @__ObjectDisposer.Add(aStream1);
                @__ObjectDisposer.Add(aStream2);
                string Result;
                Result = ((IAdmin)(@__Instance)).AddRemoteModule(aModuleType, aRefresh, aStream1, aStream2);
                @__Message.InitializeResponseMessage(@__ServerChannelInfo, "FlowService", "Admin", "AddRemoteModuleResponse");
                @__Message.WriteAnsiString("Result", Result);
                @__Message.FinalizeMessage();
                @__oResponseOptions = RemObjects.SDK.Server.ResponseOptions.roDefault;
            }
            finally {
                @__ObjectDisposer.Dispose();
            }
        }
        
        public static void Invoke_LoadModuleList(RemObjects.SDK.IROService @__Instance, RemObjects.SDK.IMessage @__Message, RemObjects.SDK.Server.IServerChannelInfo @__ServerChannelInfo, out RemObjects.SDK.Server.ResponseOptions @__oResponseOptions) {
            RemObjects.SDK.ObjectDisposer @__ObjectDisposer = new RemObjects.SDK.ObjectDisposer(1);
            try {
                string aTable = @__Message.ReadAnsiString("aTable");
                string aIDField = @__Message.ReadAnsiString("aIDField");
                string aNameField = @__Message.ReadAnsiString("aNameField");
                string aDescription = @__Message.ReadAnsiString("aDescription");
                string[][] Result;
                Result = ((IAdmin)(@__Instance)).LoadModuleList(aTable, aIDField, aNameField, aDescription);
                @__ObjectDisposer.Add(Result);
                @__Message.InitializeResponseMessage(@__ServerChannelInfo, "FlowService", "Admin", "LoadModuleListResponse");
                @__Message.Write("Result", Result, typeof(string[][]), RemObjects.SDK.StreamingFormat.AnsiString);
                @__Message.FinalizeMessage();
                @__oResponseOptions = RemObjects.SDK.Server.ResponseOptions.roDefault;
            }
            finally {
                @__ObjectDisposer.Dispose();
            }
        }
        
        public static void Invoke_GetComputerName(RemObjects.SDK.IROService @__Instance, RemObjects.SDK.IMessage @__Message, RemObjects.SDK.Server.IServerChannelInfo @__ServerChannelInfo, out RemObjects.SDK.Server.ResponseOptions @__oResponseOptions) {
            string Result;
            Result = ((IAdmin)(@__Instance)).GetComputerName();
            @__Message.InitializeResponseMessage(@__ServerChannelInfo, "FlowService", "Admin", "GetComputerNameResponse");
            @__Message.WriteAnsiString("Result", Result);
            @__Message.FinalizeMessage();
            @__oResponseOptions = RemObjects.SDK.Server.ResponseOptions.roDefault;
        }
        
        public static void Invoke_Ping(RemObjects.SDK.IROService @__Instance, RemObjects.SDK.IMessage @__Message, RemObjects.SDK.Server.IServerChannelInfo @__ServerChannelInfo, out RemObjects.SDK.Server.ResponseOptions @__oResponseOptions) {
            bool Result;
            Result = ((IAdmin)(@__Instance)).Ping();
            @__Message.InitializeResponseMessage(@__ServerChannelInfo, "FlowService", "Admin", "PingResponse");
            @__Message.WriteBoolean("Result", Result);
            @__Message.FinalizeMessage();
            @__oResponseOptions = RemObjects.SDK.Server.ResponseOptions.roDefault;
        }
        
        public static void Invoke_RefreshActions(RemObjects.SDK.IROService @__Instance, RemObjects.SDK.IMessage @__Message, RemObjects.SDK.Server.IServerChannelInfo @__ServerChannelInfo, out RemObjects.SDK.Server.ResponseOptions @__oResponseOptions) {
            bool Result;
            Result = ((IAdmin)(@__Instance)).RefreshActions();
            @__Message.InitializeResponseMessage(@__ServerChannelInfo, "FlowService", "Admin", "RefreshActionsResponse");
            @__Message.WriteBoolean("Result", Result);
            @__Message.FinalizeMessage();
            @__oResponseOptions = RemObjects.SDK.Server.ResponseOptions.roDefault;
        }
        
        public static void Invoke_GetScheduleActions(RemObjects.SDK.IROService @__Instance, RemObjects.SDK.IMessage @__Message, RemObjects.SDK.Server.IServerChannelInfo @__ServerChannelInfo, out RemObjects.SDK.Server.ResponseOptions @__oResponseOptions) {
            RemObjects.SDK.ObjectDisposer @__ObjectDisposer = new RemObjects.SDK.ObjectDisposer(1);
            try {
                bool aShowDisabled = @__Message.ReadBoolean("aShowDisabled");
                string[][] Result;
                Result = ((IAdmin)(@__Instance)).GetScheduleActions(aShowDisabled);
                @__ObjectDisposer.Add(Result);
                @__Message.InitializeResponseMessage(@__ServerChannelInfo, "FlowService", "Admin", "GetScheduleActionsResponse");
                @__Message.Write("Result", Result, typeof(string[][]), RemObjects.SDK.StreamingFormat.AnsiString);
                @__Message.FinalizeMessage();
                @__oResponseOptions = RemObjects.SDK.Server.ResponseOptions.roDefault;
            }
            finally {
                @__ObjectDisposer.Dispose();
            }
        }
        
        public static void Invoke_GetMonitorActions(RemObjects.SDK.IROService @__Instance, RemObjects.SDK.IMessage @__Message, RemObjects.SDK.Server.IServerChannelInfo @__ServerChannelInfo, out RemObjects.SDK.Server.ResponseOptions @__oResponseOptions) {
            RemObjects.SDK.ObjectDisposer @__ObjectDisposer = new RemObjects.SDK.ObjectDisposer(1);
            try {
                bool aShowDisabled = @__Message.ReadBoolean("aShowDisabled");
                string[][] Result;
                Result = ((IAdmin)(@__Instance)).GetMonitorActions(aShowDisabled);
                @__ObjectDisposer.Add(Result);
                @__Message.InitializeResponseMessage(@__ServerChannelInfo, "FlowService", "Admin", "GetMonitorActionsResponse");
                @__Message.Write("Result", Result, typeof(string[][]), RemObjects.SDK.StreamingFormat.AnsiString);
                @__Message.FinalizeMessage();
                @__oResponseOptions = RemObjects.SDK.Server.ResponseOptions.roDefault;
            }
            finally {
                @__ObjectDisposer.Dispose();
            }
        }
        
        public static void Invoke_GetExecutingActions(RemObjects.SDK.IROService @__Instance, RemObjects.SDK.IMessage @__Message, RemObjects.SDK.Server.IServerChannelInfo @__ServerChannelInfo, out RemObjects.SDK.Server.ResponseOptions @__oResponseOptions) {
            RemObjects.SDK.ObjectDisposer @__ObjectDisposer = new RemObjects.SDK.ObjectDisposer(1);
            try {
                bool aShowDisabled = @__Message.ReadBoolean("aShowDisabled");
                string[][] Result;
                Result = ((IAdmin)(@__Instance)).GetExecutingActions(aShowDisabled);
                @__ObjectDisposer.Add(Result);
                @__Message.InitializeResponseMessage(@__ServerChannelInfo, "FlowService", "Admin", "GetExecutingActionsResponse");
                @__Message.Write("Result", Result, typeof(string[][]), RemObjects.SDK.StreamingFormat.AnsiString);
                @__Message.FinalizeMessage();
                @__oResponseOptions = RemObjects.SDK.Server.ResponseOptions.roDefault;
            }
            finally {
                @__ObjectDisposer.Dispose();
            }
        }
        
        public static void Invoke_GetTransportActions(RemObjects.SDK.IROService @__Instance, RemObjects.SDK.IMessage @__Message, RemObjects.SDK.Server.IServerChannelInfo @__ServerChannelInfo, out RemObjects.SDK.Server.ResponseOptions @__oResponseOptions) {
            RemObjects.SDK.ObjectDisposer @__ObjectDisposer = new RemObjects.SDK.ObjectDisposer(1);
            try {
                bool aShowDisabled = @__Message.ReadBoolean("aShowDisabled");
                string[][] Result;
                Result = ((IAdmin)(@__Instance)).GetTransportActions(aShowDisabled);
                @__ObjectDisposer.Add(Result);
                @__Message.InitializeResponseMessage(@__ServerChannelInfo, "FlowService", "Admin", "GetTransportActionsResponse");
                @__Message.Write("Result", Result, typeof(string[][]), RemObjects.SDK.StreamingFormat.AnsiString);
                @__Message.FinalizeMessage();
                @__oResponseOptions = RemObjects.SDK.Server.ResponseOptions.roDefault;
            }
            finally {
                @__ObjectDisposer.Dispose();
            }
        }
        
        public static void Invoke_GetPendingFiles(RemObjects.SDK.IROService @__Instance, RemObjects.SDK.IMessage @__Message, RemObjects.SDK.Server.IServerChannelInfo @__ServerChannelInfo, out RemObjects.SDK.Server.ResponseOptions @__oResponseOptions) {
            RemObjects.SDK.ObjectDisposer @__ObjectDisposer = new RemObjects.SDK.ObjectDisposer(1);
            try {
                string[][] Result;
                Result = ((IAdmin)(@__Instance)).GetPendingFiles();
                @__ObjectDisposer.Add(Result);
                @__Message.InitializeResponseMessage(@__ServerChannelInfo, "FlowService", "Admin", "GetPendingFilesResponse");
                @__Message.Write("Result", Result, typeof(string[][]), RemObjects.SDK.StreamingFormat.AnsiString);
                @__Message.FinalizeMessage();
                @__oResponseOptions = RemObjects.SDK.Server.ResponseOptions.roDefault;
            }
            finally {
                @__ObjectDisposer.Dispose();
            }
        }
        
        public static void Invoke_CloseFlowTrayServer(RemObjects.SDK.IROService @__Instance, RemObjects.SDK.IMessage @__Message, RemObjects.SDK.Server.IServerChannelInfo @__ServerChannelInfo, out RemObjects.SDK.Server.ResponseOptions @__oResponseOptions) {
            ((IAdmin)(@__Instance)).CloseFlowTrayServer();
            @__Message.InitializeResponseMessage(@__ServerChannelInfo, "FlowService", "Admin", "CloseFlowTrayServerResponse");
            @__Message.FinalizeMessage();
            @__oResponseOptions = RemObjects.SDK.Server.ResponseOptions.roNoResponse;
        }
        
        public static void Invoke_CloseServer(RemObjects.SDK.IROService @__Instance, RemObjects.SDK.IMessage @__Message, RemObjects.SDK.Server.IServerChannelInfo @__ServerChannelInfo, out RemObjects.SDK.Server.ResponseOptions @__oResponseOptions) {
            ((IAdmin)(@__Instance)).CloseServer();
            @__Message.InitializeResponseMessage(@__ServerChannelInfo, "FlowService", "Admin", "CloseServerResponse");
            @__Message.FinalizeMessage();
            @__oResponseOptions = RemObjects.SDK.Server.ResponseOptions.roNoResponse;
        }
    }
    
    [RemObjects.SDK.Activator()]
    [System.Reflection.ObfuscationAttribute(Exclude=true, ApplyToMembers=false)]
    public class Admin_Activator : object, RemObjects.SDK.Server.IServiceActivator {
        
        public Admin_Activator() {
        }
        
        public RemObjects.SDK.IROService CreateInstance() {
            return new Admin();
        }
    }
}
