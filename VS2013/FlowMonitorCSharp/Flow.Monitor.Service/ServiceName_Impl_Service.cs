//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Requires RODL file FloBaseTypes (rodl\FloBaseTypes.rodl) in the same namespace.
// Requires RODL file FloServerActions (rodl\FloServerActions.rodl) in the same namespace.
namespace FlowService {
    using System;
    using System.Collections.Generic;
    using RemObjects.SDK;
    using RemObjects.SDK.Types;
    using RemObjects.SDK.Server;
    using RemObjects.SDK.Server.ClassFactories;
    
    
    [RemObjects.SDK.Server.ClassFactories.StandardClassFactory()]
    [RemObjects.SDK.Server.Service(Name="Admin", InvokerClass=typeof(Admin_Invoker), ActivatorClass=typeof(Admin_Activator))]
    public class Admin : RemObjects.SDK.Server.Service, IAdmin {
        
        private System.ComponentModel.Container components = null;
        
        public Admin() : 
                this(null, null) {
        }
        
        public Admin(ISessionManager sessionManager, IEventSinkManager eventManager) : 
                base(sessionManager, eventManager) {
            this.InitializeComponent();
        }
        
        private void InitializeComponent() {
        }
        
        protected override void Dispose(bool disposing) {
            if (disposing) {
                if ((this.components != null)) {
                    this.components.Dispose();
                }
            }
            base.Dispose(disposing);
        }

        public bool SetActionStatus(int aIndex, TFloScheduledType aActionType, TFloActionSettingType aStatus)
        {
            throw new NotImplementedException();
        }

        public void LoadRemoteModule(string aModuleFIDS, TFloModuleType aModuleType, out Binary aStream1, out Binary aStream2)
        {
            throw new NotImplementedException();
        }

        public bool SaveRemoteModule(TFloModuleType aModuleType, Binary aStream1, Binary aStream2)
        {
            throw new NotImplementedException();
        }

        public string AddRemoteModule(TFloModuleType aModuleType, bool aRefresh, Binary aStream1, Binary aStream2)
        {
            throw new NotImplementedException();
        }

        public string[][] LoadModuleList(string aTable, string aIDField, string aNameField, string aDescription)
        {
            throw new NotImplementedException();
        }

        public string GetComputerName()
        {
            throw new NotImplementedException();
        }

        public bool Ping()
        {
            throw new NotImplementedException();
        }

        public bool RefreshActions()
        {
            throw new NotImplementedException();
        }

        public string[][] GetScheduleActions(bool aShowDisabled)
        {
            throw new NotImplementedException();
        }

        public string[][] GetMonitorActions(bool aShowDisabled)
        {
            throw new NotImplementedException();
        }

        public string[][] GetExecutingActions(bool aShowDisabled)
        {
            throw new NotImplementedException();
        }

        public string[][] GetTransportActions(bool aShowDisabled)
        {
            throw new NotImplementedException();
        }

        public string[][] GetPendingFiles()
        {
            throw new NotImplementedException();
        }

        public void CloseFlowTrayServer()
        {
            throw new NotImplementedException();
        }

        public void CloseServer()
        {
            throw new NotImplementedException();
        }
    }
}
