//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FloBaseTypes {
    using System;
    using System.Collections.Generic;
    using RemObjects.SDK;
    using RemObjects.SDK.Types;
    
    
    [RemObjects.SDK.Remotable()]
    [System.Reflection.ObfuscationAttribute(Exclude=true)]
    public enum TFloModuleType : int {
        
        fmtModule = 0,
        
        fmtTransport = 1,
        
        fmtDBCon = 2,
        
        fmtTransform = 3,
        
        fmtFileCon = 4,
        
        fmtDBSource = 5,
        
        fmtFileSource = 6,
        
        fmtReport = 7,
        
        fmtMap = 8,
        
        fmtAction = 9,
        
        fmtServer = 10,
        
        fmtWebApp = 11,
        
        fmtLog = 12,
        
        fmtSetup = 13,
        
        fmtUser = 14,
        
        fmtTradingPartner = 15,
        
        fmtMember = 16,
        
        fmtEDINetwork = 17,
    }
    
    [RemObjects.SDK.Remotable()]
    [System.Reflection.ObfuscationAttribute(Exclude=true)]
    public enum TFloScheduledType : int {
        
        fstScheduled = 0,
        
        fstMonitored = 1,
    }
    
    [RemObjects.SDK.Remotable()]
    [System.Reflection.ObfuscationAttribute(Exclude=true)]
    public enum TFloActionSettingType : int {
        
        fstDisable = 0,
        
        fstEnable = 1,
        
        fstPause = 2,
        
        fstResume = 3,
    }
    
    [System.Serializable()]
    [RemObjects.SDK.Remotable(ActivatorClass=typeof(ServiceConnection_Activator))]
    [System.Reflection.ObfuscationAttribute(Exclude=true)]
    public partial class ServiceConnection : RemObjects.SDK.Types.ComplexType {
        
        private string @__HostName;
        
        private string @__DatabaseName;
        
        private string @__UserName;
        
        private string @__Password;
        
        [RemObjects.SDK.StreamAs(RemObjects.SDK.StreamingFormat.AnsiString)]
        public virtual string HostName {
            get {
                return @__HostName;
            }
            set {
                @__HostName = value;
                this.TriggerPropertyChanged("HostName");
            }
        }
        
        [RemObjects.SDK.StreamAs(RemObjects.SDK.StreamingFormat.AnsiString)]
        public virtual string DatabaseName {
            get {
                return @__DatabaseName;
            }
            set {
                @__DatabaseName = value;
                this.TriggerPropertyChanged("DatabaseName");
            }
        }
        
        [RemObjects.SDK.StreamAs(RemObjects.SDK.StreamingFormat.AnsiString)]
        public virtual string UserName {
            get {
                return @__UserName;
            }
            set {
                @__UserName = value;
                this.TriggerPropertyChanged("UserName");
            }
        }
        
        [RemObjects.SDK.StreamAs(RemObjects.SDK.StreamingFormat.AnsiString)]
        public virtual string Password {
            get {
                return @__Password;
            }
            set {
                @__Password = value;
                this.TriggerPropertyChanged("Password");
            }
        }
        
        public override void ReadComplex(RemObjects.SDK.Serializer serializer) {
            if (serializer.RecordStrictOrder) {
                HostName = serializer.ReadAnsiString("HostName");
                DatabaseName = serializer.ReadAnsiString("DatabaseName");
                UserName = serializer.ReadAnsiString("UserName");
                Password = serializer.ReadAnsiString("Password");
            }
            else {
                DatabaseName = serializer.ReadAnsiString("DatabaseName");
                HostName = serializer.ReadAnsiString("HostName");
                Password = serializer.ReadAnsiString("Password");
                UserName = serializer.ReadAnsiString("UserName");
            }
        }
        
        public override void WriteComplex(RemObjects.SDK.Serializer serializer) {
            if (serializer.RecordStrictOrder) {
                serializer.WriteAnsiString("HostName", HostName);
                serializer.WriteAnsiString("DatabaseName", DatabaseName);
                serializer.WriteAnsiString("UserName", UserName);
                serializer.WriteAnsiString("Password", Password);
            }
            else {
                serializer.WriteAnsiString("DatabaseName", DatabaseName);
                serializer.WriteAnsiString("HostName", HostName);
                serializer.WriteAnsiString("Password", Password);
                serializer.WriteAnsiString("UserName", UserName);
            }
        }
    }
    
    [RemObjects.SDK.Activator()]
    [System.Reflection.ObfuscationAttribute(Exclude=true, ApplyToMembers=false)]
    public class ServiceConnection_Activator : object, RemObjects.SDK.ITypeActivator {
        
        public ServiceConnection_Activator() {
        }
        
        public object CreateInstance() {
            return new ServiceConnection();
        }
    }
    
    [System.Serializable()]
    [RemObjects.SDK.Remotable(ActivatorClass=typeof(ServiceInfo_Activator))]
    [System.Reflection.ObfuscationAttribute(Exclude=true)]
    public partial class ServiceInfo : RemObjects.SDK.Types.ComplexType {
        
        private string @__ServiceId;
        
        private string @__ServiceName;
        
        private string @__ServicePort;
        
        private string @__ServiceDisplayName;
        
        [RemObjects.SDK.StreamAs(RemObjects.SDK.StreamingFormat.AnsiString)]
        public virtual string ServiceId {
            get {
                return @__ServiceId;
            }
            set {
                @__ServiceId = value;
                this.TriggerPropertyChanged("ServiceId");
            }
        }
        
        [RemObjects.SDK.StreamAs(RemObjects.SDK.StreamingFormat.AnsiString)]
        public virtual string ServiceName {
            get {
                return @__ServiceName;
            }
            set {
                @__ServiceName = value;
                this.TriggerPropertyChanged("ServiceName");
            }
        }
        
        [RemObjects.SDK.StreamAs(RemObjects.SDK.StreamingFormat.AnsiString)]
        public virtual string ServicePort {
            get {
                return @__ServicePort;
            }
            set {
                @__ServicePort = value;
                this.TriggerPropertyChanged("ServicePort");
            }
        }
        
        [RemObjects.SDK.StreamAs(RemObjects.SDK.StreamingFormat.AnsiString)]
        public virtual string ServiceDisplayName {
            get {
                return @__ServiceDisplayName;
            }
            set {
                @__ServiceDisplayName = value;
                this.TriggerPropertyChanged("ServiceDisplayName");
            }
        }
        
        public override void ReadComplex(RemObjects.SDK.Serializer serializer) {
            if (serializer.RecordStrictOrder) {
                ServiceId = serializer.ReadAnsiString("ServiceId");
                ServiceName = serializer.ReadAnsiString("ServiceName");
                ServicePort = serializer.ReadAnsiString("ServicePort");
                ServiceDisplayName = serializer.ReadAnsiString("ServiceDisplayName");
            }
            else {
                ServiceDisplayName = serializer.ReadAnsiString("ServiceDisplayName");
                ServiceId = serializer.ReadAnsiString("ServiceId");
                ServiceName = serializer.ReadAnsiString("ServiceName");
                ServicePort = serializer.ReadAnsiString("ServicePort");
            }
        }
        
        public override void WriteComplex(RemObjects.SDK.Serializer serializer) {
            if (serializer.RecordStrictOrder) {
                serializer.WriteAnsiString("ServiceId", ServiceId);
                serializer.WriteAnsiString("ServiceName", ServiceName);
                serializer.WriteAnsiString("ServicePort", ServicePort);
                serializer.WriteAnsiString("ServiceDisplayName", ServiceDisplayName);
            }
            else {
                serializer.WriteAnsiString("ServiceDisplayName", ServiceDisplayName);
                serializer.WriteAnsiString("ServiceId", ServiceId);
                serializer.WriteAnsiString("ServiceName", ServiceName);
                serializer.WriteAnsiString("ServicePort", ServicePort);
            }
        }
    }
    
    [RemObjects.SDK.Activator()]
    [System.Reflection.ObfuscationAttribute(Exclude=true, ApplyToMembers=false)]
    public class ServiceInfo_Activator : object, RemObjects.SDK.ITypeActivator {
        
        public ServiceInfo_Activator() {
        }
        
        public object CreateInstance() {
            return new ServiceInfo();
        }
    }
}
