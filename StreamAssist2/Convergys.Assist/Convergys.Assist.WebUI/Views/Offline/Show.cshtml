@using Convergys.Assist.WebUI.Models
@using Convergys.Assist.Repository.Enums

@model Convergys.Assist.WebUI.Models.OfflineShowModel
@{
    ViewBag.Title = "Offline Activity";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section scripts
{
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.unobtrusive-ajax.min.js"></script>
    <script src="~/Scripts/timer.jquery.js"></script>
}
@section scriptscustom
{
    <script src="~/Scripts/Custom/OfflineShow.js"></script>
}
@using (Html.BeginForm("Submit", "Offline", FormMethod.Post, new { role = "form", id = "offlineForm" }))
{
    <div class="row">
        <div class="col-lg-7">
            <h1>@Resources.Content.Offline_Show_Header1&nbsp;<small>@Resources.Content.Offline_Show_Header1Small</small></h1>
        </div>
        <div class="col-lg-5">
            <div id="errorContainer"></div>
        </div>
    </div>
    <!-- /.row -->
    <div class="row">
        <div class="col-sm-4">
            <div class="btn-group btn-group-justified">
                @if (Model.ActionType != EActionType.View)
                {
                    <a href="#" class="btn btn-primary btn-default btn-xs" onclick="$(this).closest('form').submit(); return false;">Save</a>
                    <a href="#" class="btn btn-primary btn-info btn-xs clear">Clear</a>
                }
                else
                {
                    @Html.ActionLink("Edit", "Edit", new { id = Model.Offline.OfflineLogId }, new { @class = "btn btn-primary btn-default btn-xs" })
                    @Html.ActionLink("New", "Create", null, new { @class = "btn btn-primary btn-info btn-xs" })
                }
            </div>
        </div>
    </div>
    <!-- /.row -->
    <div class="row">
        <div class="col-lg-7">
            <div class="form-group">
                <label>@Resources.Content.Offline_Show_AssignToTeam</label>
                <div class="input-group date">
                    @Html.HiddenFor(t => t.Offline.TeamId, new { id = "hdnTeamId" })
                    @Html.HiddenFor(t => t.Offline.Team, new { id = "hdnTeamName" })
                    <p class="form-control-static">@Model.Offline.Team</p>
                </div>
            </div>
        </div>
        <div class="col-lg-5">
            <div class="form-group">
                <label>@Resources.Content.Offline_Show_AssignToAgent</label>
                <div class="input-group date">
                    @Html.HiddenFor(t => t.Offline.EmpId, new { id = "hdnEmpId" })
                    @Html.HiddenFor(t => t.Offline.FirstName, new { id = "hdnEmpName" })
                    <p class="form-control-static">@Model.Offline.FirstName</p>
                </div>
            </div>
        </div>
    </div>
    
    
    <div class="row">
        <div class="col-lg-6">
            <!-- /.row -->
            <div class="row">
                <div class="col-sm-12">
                    <div class="form-group">
                        @Html.HiddenFor(b => b.Offline.OfflineContactTypeId, new { id = "hdnContactTypeId" })
                        @Html.HiddenFor(b => b.Offline.OfflineContactType, new { id = "hdnContactTypeText" })
                        @if (Model.ActionType == EActionType.View)
                        {
                            <label>@Resources.Content.Offline_Show_ContactType</label> 
                            <p class="form-control-static">@Model.Offline.OfflineContactType</p> 
                        }
                        else
                        {
                            <select class="form-control" id="selContactType" name="selContactType"
                                onclick="javascript:TypeDropDownChange('hdnContactTypeId', 'hdnContactTypeText', 'selContactType');">
                            </select>
                        }
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-12">
                    <div class="form-group">
                        @Html.HiddenFor(b => b.Offline.OfflineActivityTypeId, new { id = "hdnActivityTypeId" })
                        @Html.HiddenFor(b => b.Offline.OfflineActivityType, new { id = "hdnActivityTypeText" })
                        @if (Model.ActionType == EActionType.View)
                        { 
                            <label>@Resources.Content.Offline_Show_ActivityType</label>
                            <p class="form-control-static">@Model.Offline.OfflineContactType</p> 
                        }
                        else
                        {
                            <select class="form-control" id="selActivityType" name="selActivityType"
                                onclick="javascript:TypeDropDownChange('hdnActivityTypeId', 'hdnActivityTypeText', 'selActivityType');">
                            </select>
                        }
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-sm-8">
                    <div class="form-group">
                        <label>@Resources.Content.Offline_Show_CaseIdentity</label>
                        @if (Model.ActionType == EActionType.View)
                        { <p class="form-control-static">@Model.Offline.CaseIdentity</p> }
                        else
                        {  @Html.TextBoxFor(model => model.Offline.CaseIdentity, new { @class = "form-control", maxlength = "50" }) }
                    </div>
                </div>
                <div class="col-sm-4">
                    <label>@Resources.Content.Offline_Search_FilterStatusLabel</label>
                    <div class="form-group">
                        @if (Model.ActionType == EActionType.View)
                        {
                            <p class="form-control-static">@Model.Offline.OfflineStatus</p> 
                        }
                        else
                        {
                            @Html.DropDownListFor(model => model.Offline.Status,
                                      new SelectList(Model.OfflineStatusOptions, "Key", "Value", Model.OfflineStatusOptions.First(t => t.Value == "Open").Key),
                                      new { id = "ddFilterStatus", @class = "form-control" })
                        }
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-12">
                    <div class="form-group">
                        @if (Model.ActionType == EActionType.View)
                        { 
                            <label>@Resources.Content.Offline_Show_Comments</label>
                            <p class="form-control-static">@Model.Offline.Comments</p> 
                        }
                        else
                        { @Html.TextBoxFor(model => model.Offline.Comments, new { type = "text", @class = "form-control", maxlength = "500", placeholder = "Comments" }) }
                    </div>
                </div>
            </div>
            <!-- /.row -->
            @if (Model.ActionType == EActionType.Edit)
            {
                <div class="row">
                    <div class="col-sm-12">
                        <div id="TimerPanel" class="panel panel-success">
                            <div class="panel-heading">
                                <div class="row">
                                    <div class="col-xs-4">
                                        <a href="#" id="TimerPause"><i class="fa fa-pause fa-5x"></i></a>&nbsp;
                            <a href="#" id="TimerPlay"><i class="fa fa-play fa-5x"></i></a>
                                    </div>
                                    <div class="col-xs-6">
                                        <p class="announcement-heading" id="Timer"></p>
                                    </div>
                                    <div class="col-xs-2 text-right">
                                        <a href="#" id="TimerStop"><i class="fa fa-plus-square fa-5x"></i></a>
                                    </div>
                                </div>
                            </div>
                            <div class="panel-body">
                                <div class="form-group">
                                    <input class="form-control" id="OfflineEvent_Comments" maxlength="50" name="OfflineEvent.Comments" type="text" value="" placeholder="Event Comment">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
        @if (Model.ActionType != EActionType.Create)
        {
            <div class="col-lg-6">
                <div class="table-responsive">
                    <table class="table table-bordered table-hover table-striped tablesorter" id="EventsTable">
                        <thead>
                            <tr>
                                <th class="header" style="width: 70%">Offline Event Comment</th>
                                <th class="header" style="width: 25%">Elapsed Time</th>
                                <th class="header" style="width: 5%"></th>
                            </tr>
                        </thead>
                        <tbody>
                        </tbody>
                    </table>
                </div>
            </div>
        }
    </div>
    <!-- /.row -->
    <div class="row">
        <div class="col-sm-4">
            <div class="btn-group btn-group-justified">
                @if (Model.ActionType != EActionType.View)
                {
                    <a href="#" class="btn btn-primary btn-default btn-xs" onclick="$(this).closest('form').submit(); return false;">Save</a>
                    <a href="#" class="btn btn-primary btn-info btn-xs clear">Clear</a>
                }
                else
                {
                    @Html.ActionLink("Edit", "Edit", new { id = Model.Offline.OfflineLogId }, new { @class = "btn btn-primary btn-default btn-xs" })
                    @Html.ActionLink("New", "Create", null, new { @class = "btn btn-primary btn-info btn-xs" })
                }
            </div>
        </div>
    </div>
            
    
    
    @Html.HiddenFor(p => p.Offline.OfflineLogId)
    @Html.HiddenFor(p => p.ActionTypeId)
    @Html.HiddenFor(p => p.JSONOfflineEvents)
    @Html.HiddenFor(p => p.ActionType)
     
}

